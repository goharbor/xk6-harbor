// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DangerousCVE the dangerous CVE information
//
// swagger:model DangerousCVE
type DangerousCVE struct {

	// the cve id
	CVEID string `json:"cve_id,omitempty" js:"cveid"`

	// the cvss score v3
	CvssScoreV3 float64 `json:"cvss_score_v3,omitempty" js:"cvssScoreV3"`

	// the description of the CVE
	Desc string `json:"desc,omitempty" js:"desc"`

	// the package of the CVE
	Package string `json:"package,omitempty" js:"package"`

	// the severity of the CVE
	Severity string `json:"severity,omitempty" js:"severity"`

	// the version of the package
	Version string `json:"version,omitempty" js:"version"`
}

// Validate validates this dangerous CVE
func (m *DangerousCVE) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this dangerous CVE based on context it is used
func (m *DangerousCVE) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DangerousCVE) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DangerousCVE) UnmarshalBinary(b []byte) error {
	var res DangerousCVE
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
