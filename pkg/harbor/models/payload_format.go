// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PayloadFormat Webhook supported payload format type collections.
//
// swagger:model PayloadFormat
type PayloadFormat struct {

	// The supported payload formats for this notify type.
	Formats []PayloadFormatType `json:"formats" js:"formats"`

	// notify type
	NotifyType NotifyType `json:"notify_type,omitempty" js:"notifyType"`
}

// Validate validates this payload format
func (m *PayloadFormat) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFormats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotifyType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PayloadFormat) validateFormats(formats strfmt.Registry) error {
	if swag.IsZero(m.Formats) { // not required
		return nil
	}

	for i := 0; i < len(m.Formats); i++ {

		if err := m.Formats[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("formats" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("formats" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PayloadFormat) validateNotifyType(formats strfmt.Registry) error {
	if swag.IsZero(m.NotifyType) { // not required
		return nil
	}

	if err := m.NotifyType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("notify_type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("notify_type")
		}
		return err
	}

	return nil
}

// ContextValidate validate this payload format based on the context it is used
func (m *PayloadFormat) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFormats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNotifyType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PayloadFormat) contextValidateFormats(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Formats); i++ {

		if swag.IsZero(m.Formats[i]) { // not required
			return nil
		}

		if err := m.Formats[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("formats" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("formats" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PayloadFormat) contextValidateNotifyType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.NotifyType) { // not required
		return nil
	}

	if err := m.NotifyType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("notify_type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("notify_type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PayloadFormat) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PayloadFormat) UnmarshalBinary(b []byte) error {
	var res PayloadFormat
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
