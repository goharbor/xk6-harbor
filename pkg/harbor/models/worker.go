// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Worker worker in the pool
//
// swagger:model Worker
type Worker struct {

	// the checkin of the running job in the worker
	CheckIn string `json:"check_in,omitempty" js:"checkIn"`

	// The checkin time of the worker
	// Format: date-time
	CheckinAt *strfmt.DateTime `json:"checkin_at,omitempty" js:"checkinAt"`

	// the id of the worker
	ID string `json:"id,omitempty" js:"id"`

	// the id of the running job in the worker
	JobID string `json:"job_id,omitempty" js:"jobID"`

	// the name of the running job in the worker
	JobName string `json:"job_name,omitempty" js:"jobName"`

	// the id of the worker pool
	PoolID string `json:"pool_id,omitempty" js:"poolID"`

	// The start time of the worker
	// Format: date-time
	StartAt *strfmt.DateTime `json:"start_at,omitempty" js:"startAt"`
}

// Validate validates this worker
func (m *Worker) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCheckinAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Worker) validateCheckinAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CheckinAt) { // not required
		return nil
	}

	if err := validate.FormatOf("checkin_at", "body", "date-time", m.CheckinAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Worker) validateStartAt(formats strfmt.Registry) error {
	if swag.IsZero(m.StartAt) { // not required
		return nil
	}

	if err := validate.FormatOf("start_at", "body", "date-time", m.StartAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this worker based on context it is used
func (m *Worker) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Worker) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Worker) UnmarshalBinary(b []byte) error {
	var res Worker
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
