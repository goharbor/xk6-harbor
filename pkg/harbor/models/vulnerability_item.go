// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VulnerabilityItem the vulnerability item info
//
// swagger:model VulnerabilityItem
type VulnerabilityItem struct {

	// the CVE id of the vulnerability.
	CVEID string `json:"cve_id,omitempty" js:"cveid"`

	// the nvd cvss v3 score of the vulnerability
	CvssV3Score float32 `json:"cvss_v3_score,omitempty" js:"cvssV3Score"`

	// The description of the vulnerability
	Desc string `json:"desc,omitempty" js:"desc"`

	// the digest of the artifact
	Digest string `json:"digest,omitempty" js:"digest"`

	// the fixed version of the package
	FixedVersion string `json:"fixed_version,omitempty" js:"fixedVersion"`

	// Links of the vulnerability
	Links []string `json:"links" js:"links"`

	// the package of the vulnerability
	Package string `json:"package,omitempty" js:"package"`

	// the project ID of the artifact
	ProjectID int64 `json:"project_id,omitempty" js:"projectID"`

	// the repository name of the artifact
	RepositoryName string `json:"repository_name,omitempty" js:"repositoryName"`

	// the severity of the vulnerability
	Severity string `json:"severity,omitempty" js:"severity"`

	// the tags of the artifact
	Tags []string `json:"tags" js:"tags"`

	// the version of the package
	Version string `json:"version,omitempty" js:"version"`
}

// Validate validates this vulnerability item
func (m *VulnerabilityItem) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this vulnerability item based on context it is used
func (m *VulnerabilityItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VulnerabilityItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VulnerabilityItem) UnmarshalBinary(b []byte) error {
	var res VulnerabilityItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
