// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ScanDataExportRequest The criteria to select the scan data to export.
//
// swagger:model ScanDataExportRequest
type ScanDataExportRequest struct {

	// CVE-IDs for which to export data. Multiple CVE-IDs can be specified by separating using ',' and enclosed between '{}'. Defaults to all if empty
	CVEIds string `json:"cveIds,omitempty" js:"cveIds"`

	// Name of the scan data export job
	JobName string `json:"job_name,omitempty" js:"jobName"`

	// A list of one or more labels for which to export the scan data, defaults to all if empty
	Labels []int64 `json:"labels" js:"labels"`

	// A list of one or more projects for which to export the scan data, currently only one project is supported due to performance concerns, but define as array for extension in the future.
	Projects []int64 `json:"projects" js:"projects"`

	// A list of repositories for which to export the scan data, defaults to all if empty
	Repositories string `json:"repositories,omitempty" js:"repositories"`

	// A list of tags enclosed within '{}'. Defaults to all if empty
	Tags string `json:"tags,omitempty" js:"tags"`
}

// Validate validates this scan data export request
func (m *ScanDataExportRequest) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this scan data export request based on context it is used
func (m *ScanDataExportRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ScanDataExportRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScanDataExportRequest) UnmarshalBinary(b []byte) error {
	var res ScanDataExportRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
