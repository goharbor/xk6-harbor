// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScheduleTask the schedule task info
//
// swagger:model ScheduleTask
type ScheduleTask struct {

	// the cron of the current schedule task
	Cron string `json:"cron,omitempty" js:"cron"`

	// the id of the Schedule task
	ID int64 `json:"id,omitempty" js:"id"`

	// the update time of the schedule task
	// Format: date-time
	UpdateTime strfmt.DateTime `json:"update_time,omitempty" js:"updateTime"`

	// the vendor id of the current task
	VendorID int64 `json:"vendor_id,omitempty" js:"vendorID"`

	// the vendor type of the current schedule task
	VendorType string `json:"vendor_type,omitempty" js:"vendorType"`
}

// Validate validates this schedule task
func (m *ScheduleTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduleTask) validateUpdateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("update_time", "body", "date-time", m.UpdateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this schedule task based on context it is used
func (m *ScheduleTask) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ScheduleTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScheduleTask) UnmarshalBinary(b []byte) error {
	var res ScheduleTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
