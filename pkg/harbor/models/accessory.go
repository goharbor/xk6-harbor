// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Accessory The accessory of the artifact
//
// swagger:model Accessory
type Accessory struct {

	// The artifact id of the accessory
	ArtifactID int64 `json:"artifact_id" js:"artifactID"`

	// The creation time of the accessory
	// Format: date-time
	CreationTime strfmt.DateTime `json:"creation_time,omitempty" js:"creationTime"`

	// The artifact digest of the accessory
	Digest string `json:"digest" js:"digest"`

	// The icon of the accessory
	Icon string `json:"icon" js:"icon"`

	// The ID of the accessory
	ID int64 `json:"id,omitempty" js:"id"`

	// The artifact size of the accessory
	Size int64 `json:"size" js:"size"`

	// The subject artifact digest of the accessory
	SubjectArtifactDigest string `json:"subject_artifact_digest" js:"subjectArtifactDigest"`

	// Going to be deprecated, use repo and digest for insteand. The subject artifact id of the accessory.
	SubjectArtifactID int64 `json:"subject_artifact_id,omitempty" js:"subjectArtifactID"`

	// The subject artifact repository name of the accessory
	SubjectArtifactRepo string `json:"subject_artifact_repo" js:"subjectArtifactRepo"`

	// The artifact size of the accessory
	Type string `json:"type" js:"type"`
}

// Validate validates this accessory
func (m *Accessory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Accessory) validateCreationTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("creation_time", "body", "date-time", m.CreationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this accessory based on context it is used
func (m *Accessory) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Accessory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Accessory) UnmarshalBinary(b []byte) error {
	var res Accessory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
