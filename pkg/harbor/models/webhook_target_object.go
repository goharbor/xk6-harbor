// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WebhookTargetObject The webhook policy target object.
//
// swagger:model WebhookTargetObject
type WebhookTargetObject struct {

	// The webhook target address.
	Address string `json:"address,omitempty" js:"address"`

	// The webhook auth header.
	AuthHeader string `json:"auth_header,omitempty" js:"authHeader"`

	// The payload format of webhook, by default is Default for http type.
	PayloadFormat PayloadFormatType `json:"payload_format,omitempty" js:"payloadFormat"`

	// Whether or not to skip cert verify.
	SkipCertVerify bool `json:"skip_cert_verify,omitempty" js:"skipCertVerify"`

	// The webhook target notify type.
	Type string `json:"type,omitempty" js:"type"`
}

// Validate validates this webhook target object
func (m *WebhookTargetObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePayloadFormat(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebhookTargetObject) validatePayloadFormat(formats strfmt.Registry) error {
	if swag.IsZero(m.PayloadFormat) { // not required
		return nil
	}

	if err := m.PayloadFormat.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("payload_format")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("payload_format")
		}
		return err
	}

	return nil
}

// ContextValidate validate this webhook target object based on the context it is used
func (m *WebhookTargetObject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePayloadFormat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebhookTargetObject) contextValidatePayloadFormat(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.PayloadFormat) { // not required
		return nil
	}

	if err := m.PayloadFormat.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("payload_format")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("payload_format")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebhookTargetObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebhookTargetObject) UnmarshalBinary(b []byte) error {
	var res WebhookTargetObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
