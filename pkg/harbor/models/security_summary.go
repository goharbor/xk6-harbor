// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SecuritySummary the security summary
//
// swagger:model SecuritySummary
type SecuritySummary struct {

	// the count of critical vulnerabilities
	CriticalCnt int64 `json:"critical_cnt" js:"criticalCnt"`

	// the list of dangerous artifacts
	DangerousArtifacts []*DangerousArtifact `json:"dangerous_artifacts,omitempty" js:"dangerousArtifacts"`

	// the list of dangerous CVEs
	DangerousCves []*DangerousCVE `json:"dangerous_cves,omitempty" js:"dangerousCves"`

	// the count of fixable vulnerabilities
	FixableCnt int64 `json:"fixable_cnt" js:"fixableCnt"`

	// the count of high vulnerabilities
	HighCnt int64 `json:"high_cnt,omitempty" js:"highCnt"`

	// the count of low vulnerabilities
	LowCnt int64 `json:"low_cnt" js:"lowCnt"`

	// the count of medium vulnerabilities
	MediumCnt int64 `json:"medium_cnt" js:"mediumCnt"`

	// the count of none vulnerabilities
	NoneCnt int64 `json:"none_cnt,omitempty" js:"noneCnt"`

	// the count of scanned artifacts
	ScannedCnt int64 `json:"scanned_cnt" js:"scannedCnt"`

	// the total count of artifacts
	TotalArtifact int64 `json:"total_artifact" js:"totalArtifact"`

	// the count of total vulnerabilities
	TotalVuls int64 `json:"total_vuls" js:"totalVuls"`

	// the count of unknown vulnerabilities
	UnknownCnt int64 `json:"unknown_cnt,omitempty" js:"unknownCnt"`
}

// Validate validates this security summary
func (m *SecuritySummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDangerousArtifacts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDangerousCves(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecuritySummary) validateDangerousArtifacts(formats strfmt.Registry) error {
	if swag.IsZero(m.DangerousArtifacts) { // not required
		return nil
	}

	for i := 0; i < len(m.DangerousArtifacts); i++ {
		if swag.IsZero(m.DangerousArtifacts[i]) { // not required
			continue
		}

		if m.DangerousArtifacts[i] != nil {
			if err := m.DangerousArtifacts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dangerous_artifacts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dangerous_artifacts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SecuritySummary) validateDangerousCves(formats strfmt.Registry) error {
	if swag.IsZero(m.DangerousCves) { // not required
		return nil
	}

	for i := 0; i < len(m.DangerousCves); i++ {
		if swag.IsZero(m.DangerousCves[i]) { // not required
			continue
		}

		if m.DangerousCves[i] != nil {
			if err := m.DangerousCves[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dangerous_cves" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dangerous_cves" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this security summary based on the context it is used
func (m *SecuritySummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDangerousArtifacts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDangerousCves(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecuritySummary) contextValidateDangerousArtifacts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DangerousArtifacts); i++ {

		if m.DangerousArtifacts[i] != nil {

			if swag.IsZero(m.DangerousArtifacts[i]) { // not required
				return nil
			}

			if err := m.DangerousArtifacts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dangerous_artifacts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dangerous_artifacts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SecuritySummary) contextValidateDangerousCves(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DangerousCves); i++ {

		if m.DangerousCves[i] != nil {

			if swag.IsZero(m.DangerousCves[i]) { // not required
				return nil
			}

			if err := m.DangerousCves[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dangerous_cves" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dangerous_cves" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecuritySummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecuritySummary) UnmarshalBinary(b []byte) error {
	var res SecuritySummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
