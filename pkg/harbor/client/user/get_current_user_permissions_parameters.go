// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetCurrentUserPermissionsParams creates a new GetCurrentUserPermissionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetCurrentUserPermissionsParams() *GetCurrentUserPermissionsParams {
	return &GetCurrentUserPermissionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetCurrentUserPermissionsParamsWithTimeout creates a new GetCurrentUserPermissionsParams object
// with the ability to set a timeout on a request.
func NewGetCurrentUserPermissionsParamsWithTimeout(timeout time.Duration) *GetCurrentUserPermissionsParams {
	return &GetCurrentUserPermissionsParams{
		timeout: timeout,
	}
}

// NewGetCurrentUserPermissionsParamsWithContext creates a new GetCurrentUserPermissionsParams object
// with the ability to set a context for a request.
func NewGetCurrentUserPermissionsParamsWithContext(ctx context.Context) *GetCurrentUserPermissionsParams {
	return &GetCurrentUserPermissionsParams{
		Context: ctx,
	}
}

// NewGetCurrentUserPermissionsParamsWithHTTPClient creates a new GetCurrentUserPermissionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetCurrentUserPermissionsParamsWithHTTPClient(client *http.Client) *GetCurrentUserPermissionsParams {
	return &GetCurrentUserPermissionsParams{
		HTTPClient: client,
	}
}

/*
GetCurrentUserPermissionsParams contains all the parameters to send to the API endpoint

	for the get current user permissions operation.

	Typically these are written to a http.Request.
*/
type GetCurrentUserPermissionsParams struct {

	/* XRequestID.

	   An unique ID for the request
	*/
	XRequestID *string `js:"xRequestID"`

	/* Relative.

	     If true, the resources in the response are relative to the scope,
	eg for resource '/project/1/repository' if relative is 'true' then the resource in response will be 'repository'.

	*/
	Relative *bool `js:"relative"`

	/* Scope.

	   The scope for the permission
	*/
	Scope *string `js:"scope"`

	timeout    time.Duration
	Context    context.Context `js:"context"`
	HTTPClient *http.Client    `js:"httpClient"`
}

// WithDefaults hydrates default values in the get current user permissions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCurrentUserPermissionsParams) WithDefaults() *GetCurrentUserPermissionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get current user permissions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCurrentUserPermissionsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get current user permissions params
func (o *GetCurrentUserPermissionsParams) WithTimeout(timeout time.Duration) *GetCurrentUserPermissionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get current user permissions params
func (o *GetCurrentUserPermissionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get current user permissions params
func (o *GetCurrentUserPermissionsParams) WithContext(ctx context.Context) *GetCurrentUserPermissionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get current user permissions params
func (o *GetCurrentUserPermissionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get current user permissions params
func (o *GetCurrentUserPermissionsParams) WithHTTPClient(client *http.Client) *GetCurrentUserPermissionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get current user permissions params
func (o *GetCurrentUserPermissionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXRequestID adds the xRequestID to the get current user permissions params
func (o *GetCurrentUserPermissionsParams) WithXRequestID(xRequestID *string) *GetCurrentUserPermissionsParams {
	o.SetXRequestID(xRequestID)
	return o
}

// SetXRequestID adds the xRequestId to the get current user permissions params
func (o *GetCurrentUserPermissionsParams) SetXRequestID(xRequestID *string) {
	o.XRequestID = xRequestID
}

// WithRelative adds the relative to the get current user permissions params
func (o *GetCurrentUserPermissionsParams) WithRelative(relative *bool) *GetCurrentUserPermissionsParams {
	o.SetRelative(relative)
	return o
}

// SetRelative adds the relative to the get current user permissions params
func (o *GetCurrentUserPermissionsParams) SetRelative(relative *bool) {
	o.Relative = relative
}

// WithScope adds the scope to the get current user permissions params
func (o *GetCurrentUserPermissionsParams) WithScope(scope *string) *GetCurrentUserPermissionsParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the get current user permissions params
func (o *GetCurrentUserPermissionsParams) SetScope(scope *string) {
	o.Scope = scope
}

// WriteToRequest writes these params to a swagger request
func (o *GetCurrentUserPermissionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XRequestID != nil {

		// header param X-Request-Id
		if err := r.SetHeaderParam("X-Request-Id", *o.XRequestID); err != nil {
			return err
		}
	}

	if o.Relative != nil {

		// query param relative
		var qrRelative bool

		if o.Relative != nil {
			qrRelative = *o.Relative
		}
		qRelative := swag.FormatBool(qrRelative)
		if qRelative != "" {

			if err := r.SetQueryParam("relative", qRelative); err != nil {
				return err
			}
		}
	}

	if o.Scope != nil {

		// query param scope
		var qrScope string

		if o.Scope != nil {
			qrScope = *o.Scope
		}
		qScope := qrScope
		if qScope != "" {

			if err := r.SetQueryParam("scope", qScope); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
