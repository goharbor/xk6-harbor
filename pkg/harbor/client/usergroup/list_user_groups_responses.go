// Code generated by go-swagger; DO NOT EDIT.

package usergroup

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/goharbor/xk6-harbor/pkg/harbor/models"
)

// ListUserGroupsReader is a Reader for the ListUserGroups structure.
type ListUserGroupsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListUserGroupsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListUserGroupsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListUserGroupsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListUserGroupsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListUserGroupsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /usergroups] listUserGroups", response, response.Code())
	}
}

// NewListUserGroupsOK creates a ListUserGroupsOK with default headers values
func NewListUserGroupsOK() *ListUserGroupsOK {
	return &ListUserGroupsOK{}
}

/*
ListUserGroupsOK describes a response with status code 200, with default header values.

Get user group successfully.
*/
type ListUserGroupsOK struct {

	/* Link to previous page and next page
	 */
	Link string

	/* The total count of available items
	 */
	XTotalCount int64

	Payload []*models.UserGroup
}

// IsSuccess returns true when this list user groups o k response has a 2xx status code
func (o *ListUserGroupsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list user groups o k response has a 3xx status code
func (o *ListUserGroupsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list user groups o k response has a 4xx status code
func (o *ListUserGroupsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list user groups o k response has a 5xx status code
func (o *ListUserGroupsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list user groups o k response a status code equal to that given
func (o *ListUserGroupsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list user groups o k response
func (o *ListUserGroupsOK) Code() int {
	return 200
}

func (o *ListUserGroupsOK) Error() string {
	return fmt.Sprintf("[GET /usergroups][%d] listUserGroupsOK  %+v", 200, o.Payload)
}

func (o *ListUserGroupsOK) String() string {
	return fmt.Sprintf("[GET /usergroups][%d] listUserGroupsOK  %+v", 200, o.Payload)
}

func (o *ListUserGroupsOK) GetPayload() []*models.UserGroup {
	return o.Payload
}

func (o *ListUserGroupsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Link
	hdrLink := response.GetHeader("Link")

	if hdrLink != "" {
		o.Link = hdrLink
	}

	// hydrates response header X-Total-Count
	hdrXTotalCount := response.GetHeader("X-Total-Count")

	if hdrXTotalCount != "" {
		valxTotalCount, err := swag.ConvertInt64(hdrXTotalCount)
		if err != nil {
			return errors.InvalidType("X-Total-Count", "header", "int64", hdrXTotalCount)
		}
		o.XTotalCount = valxTotalCount
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUserGroupsUnauthorized creates a ListUserGroupsUnauthorized with default headers values
func NewListUserGroupsUnauthorized() *ListUserGroupsUnauthorized {
	return &ListUserGroupsUnauthorized{}
}

/*
ListUserGroupsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ListUserGroupsUnauthorized struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this list user groups unauthorized response has a 2xx status code
func (o *ListUserGroupsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list user groups unauthorized response has a 3xx status code
func (o *ListUserGroupsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list user groups unauthorized response has a 4xx status code
func (o *ListUserGroupsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list user groups unauthorized response has a 5xx status code
func (o *ListUserGroupsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list user groups unauthorized response a status code equal to that given
func (o *ListUserGroupsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list user groups unauthorized response
func (o *ListUserGroupsUnauthorized) Code() int {
	return 401
}

func (o *ListUserGroupsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /usergroups][%d] listUserGroupsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListUserGroupsUnauthorized) String() string {
	return fmt.Sprintf("[GET /usergroups][%d] listUserGroupsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListUserGroupsUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ListUserGroupsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUserGroupsForbidden creates a ListUserGroupsForbidden with default headers values
func NewListUserGroupsForbidden() *ListUserGroupsForbidden {
	return &ListUserGroupsForbidden{}
}

/*
ListUserGroupsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ListUserGroupsForbidden struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this list user groups forbidden response has a 2xx status code
func (o *ListUserGroupsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list user groups forbidden response has a 3xx status code
func (o *ListUserGroupsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list user groups forbidden response has a 4xx status code
func (o *ListUserGroupsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list user groups forbidden response has a 5xx status code
func (o *ListUserGroupsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list user groups forbidden response a status code equal to that given
func (o *ListUserGroupsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list user groups forbidden response
func (o *ListUserGroupsForbidden) Code() int {
	return 403
}

func (o *ListUserGroupsForbidden) Error() string {
	return fmt.Sprintf("[GET /usergroups][%d] listUserGroupsForbidden  %+v", 403, o.Payload)
}

func (o *ListUserGroupsForbidden) String() string {
	return fmt.Sprintf("[GET /usergroups][%d] listUserGroupsForbidden  %+v", 403, o.Payload)
}

func (o *ListUserGroupsForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ListUserGroupsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUserGroupsInternalServerError creates a ListUserGroupsInternalServerError with default headers values
func NewListUserGroupsInternalServerError() *ListUserGroupsInternalServerError {
	return &ListUserGroupsInternalServerError{}
}

/*
ListUserGroupsInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type ListUserGroupsInternalServerError struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this list user groups internal server error response has a 2xx status code
func (o *ListUserGroupsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list user groups internal server error response has a 3xx status code
func (o *ListUserGroupsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list user groups internal server error response has a 4xx status code
func (o *ListUserGroupsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list user groups internal server error response has a 5xx status code
func (o *ListUserGroupsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list user groups internal server error response a status code equal to that given
func (o *ListUserGroupsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list user groups internal server error response
func (o *ListUserGroupsInternalServerError) Code() int {
	return 500
}

func (o *ListUserGroupsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /usergroups][%d] listUserGroupsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListUserGroupsInternalServerError) String() string {
	return fmt.Sprintf("[GET /usergroups][%d] listUserGroupsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListUserGroupsInternalServerError) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ListUserGroupsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
