// Code generated by go-swagger; DO NOT EDIT.

package scan

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery --name API --keeptree --with-expecter --case underscore

// API is the interface of the scan client
type API interface {
	/*
	   GetReportLog gets the log of the scan report

	   Get the log of the scan report*/
	GetReportLog(ctx context.Context, params *GetReportLogParams) (*GetReportLogOK, error)
	/*
	   ScanArtifact scans the artifact

	   Scan the specified artifact*/
	ScanArtifact(ctx context.Context, params *ScanArtifactParams) (*ScanArtifactAccepted, error)
	/*
	   StopScanArtifact cancellings a scan job for a particular artifact

	   Cancelling a scan job for a particular artifact*/
	StopScanArtifact(ctx context.Context, params *StopScanArtifactParams) (*StopScanArtifactAccepted, error)
}

// New creates a new scan API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for scan API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
GetReportLog gets the log of the scan report

Get the log of the scan report
*/
func (a *Client) GetReportLog(ctx context.Context, params *GetReportLogParams) (*GetReportLogOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReportLog",
		Method:             "GET",
		PathPattern:        "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/{report_id}/log",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetReportLogReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *GetReportLogOK:
		return value, nil
	case *GetReportLogBadRequest:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetReportLogUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetReportLogForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetReportLogNotFound:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetReportLogInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getReportLog: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ScanArtifact scans the artifact

Scan the specified artifact
*/
func (a *Client) ScanArtifact(ctx context.Context, params *ScanArtifactParams) (*ScanArtifactAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "scanArtifact",
		Method:             "POST",
		PathPattern:        "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ScanArtifactReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *ScanArtifactAccepted:
		return value, nil
	case *ScanArtifactBadRequest:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *ScanArtifactUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *ScanArtifactForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *ScanArtifactNotFound:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *ScanArtifactUnprocessableEntity:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *ScanArtifactInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for scanArtifact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopScanArtifact cancellings a scan job for a particular artifact

Cancelling a scan job for a particular artifact
*/
func (a *Client) StopScanArtifact(ctx context.Context, params *StopScanArtifactParams) (*StopScanArtifactAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stopScanArtifact",
		Method:             "POST",
		PathPattern:        "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StopScanArtifactReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *StopScanArtifactAccepted:
		return value, nil
	case *StopScanArtifactBadRequest:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *StopScanArtifactUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *StopScanArtifactForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *StopScanArtifactNotFound:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *StopScanArtifactUnprocessableEntity:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *StopScanArtifactInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stopScanArtifact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}
