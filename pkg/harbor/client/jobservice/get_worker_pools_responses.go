// Code generated by go-swagger; DO NOT EDIT.

package jobservice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/goharbor/xk6-harbor/pkg/harbor/models"
)

// GetWorkerPoolsReader is a Reader for the GetWorkerPools structure.
type GetWorkerPoolsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWorkerPoolsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetWorkerPoolsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetWorkerPoolsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetWorkerPoolsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetWorkerPoolsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /jobservice/pools] getWorkerPools", response, response.Code())
	}
}

// NewGetWorkerPoolsOK creates a GetWorkerPoolsOK with default headers values
func NewGetWorkerPoolsOK() *GetWorkerPoolsOK {
	return &GetWorkerPoolsOK{}
}

/*
GetWorkerPoolsOK describes a response with status code 200, with default header values.

Get worker pools successfully.
*/
type GetWorkerPoolsOK struct {
	Payload []*models.WorkerPool
}

// IsSuccess returns true when this get worker pools o k response has a 2xx status code
func (o *GetWorkerPoolsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get worker pools o k response has a 3xx status code
func (o *GetWorkerPoolsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get worker pools o k response has a 4xx status code
func (o *GetWorkerPoolsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get worker pools o k response has a 5xx status code
func (o *GetWorkerPoolsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get worker pools o k response a status code equal to that given
func (o *GetWorkerPoolsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get worker pools o k response
func (o *GetWorkerPoolsOK) Code() int {
	return 200
}

func (o *GetWorkerPoolsOK) Error() string {
	return fmt.Sprintf("[GET /jobservice/pools][%d] getWorkerPoolsOK  %+v", 200, o.Payload)
}

func (o *GetWorkerPoolsOK) String() string {
	return fmt.Sprintf("[GET /jobservice/pools][%d] getWorkerPoolsOK  %+v", 200, o.Payload)
}

func (o *GetWorkerPoolsOK) GetPayload() []*models.WorkerPool {
	return o.Payload
}

func (o *GetWorkerPoolsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkerPoolsUnauthorized creates a GetWorkerPoolsUnauthorized with default headers values
func NewGetWorkerPoolsUnauthorized() *GetWorkerPoolsUnauthorized {
	return &GetWorkerPoolsUnauthorized{}
}

/*
GetWorkerPoolsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetWorkerPoolsUnauthorized struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get worker pools unauthorized response has a 2xx status code
func (o *GetWorkerPoolsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get worker pools unauthorized response has a 3xx status code
func (o *GetWorkerPoolsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get worker pools unauthorized response has a 4xx status code
func (o *GetWorkerPoolsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get worker pools unauthorized response has a 5xx status code
func (o *GetWorkerPoolsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get worker pools unauthorized response a status code equal to that given
func (o *GetWorkerPoolsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get worker pools unauthorized response
func (o *GetWorkerPoolsUnauthorized) Code() int {
	return 401
}

func (o *GetWorkerPoolsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /jobservice/pools][%d] getWorkerPoolsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetWorkerPoolsUnauthorized) String() string {
	return fmt.Sprintf("[GET /jobservice/pools][%d] getWorkerPoolsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetWorkerPoolsUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetWorkerPoolsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkerPoolsForbidden creates a GetWorkerPoolsForbidden with default headers values
func NewGetWorkerPoolsForbidden() *GetWorkerPoolsForbidden {
	return &GetWorkerPoolsForbidden{}
}

/*
GetWorkerPoolsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetWorkerPoolsForbidden struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get worker pools forbidden response has a 2xx status code
func (o *GetWorkerPoolsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get worker pools forbidden response has a 3xx status code
func (o *GetWorkerPoolsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get worker pools forbidden response has a 4xx status code
func (o *GetWorkerPoolsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get worker pools forbidden response has a 5xx status code
func (o *GetWorkerPoolsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get worker pools forbidden response a status code equal to that given
func (o *GetWorkerPoolsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get worker pools forbidden response
func (o *GetWorkerPoolsForbidden) Code() int {
	return 403
}

func (o *GetWorkerPoolsForbidden) Error() string {
	return fmt.Sprintf("[GET /jobservice/pools][%d] getWorkerPoolsForbidden  %+v", 403, o.Payload)
}

func (o *GetWorkerPoolsForbidden) String() string {
	return fmt.Sprintf("[GET /jobservice/pools][%d] getWorkerPoolsForbidden  %+v", 403, o.Payload)
}

func (o *GetWorkerPoolsForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetWorkerPoolsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkerPoolsInternalServerError creates a GetWorkerPoolsInternalServerError with default headers values
func NewGetWorkerPoolsInternalServerError() *GetWorkerPoolsInternalServerError {
	return &GetWorkerPoolsInternalServerError{}
}

/*
GetWorkerPoolsInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetWorkerPoolsInternalServerError struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get worker pools internal server error response has a 2xx status code
func (o *GetWorkerPoolsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get worker pools internal server error response has a 3xx status code
func (o *GetWorkerPoolsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get worker pools internal server error response has a 4xx status code
func (o *GetWorkerPoolsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get worker pools internal server error response has a 5xx status code
func (o *GetWorkerPoolsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get worker pools internal server error response a status code equal to that given
func (o *GetWorkerPoolsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get worker pools internal server error response
func (o *GetWorkerPoolsInternalServerError) Code() int {
	return 500
}

func (o *GetWorkerPoolsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /jobservice/pools][%d] getWorkerPoolsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetWorkerPoolsInternalServerError) String() string {
	return fmt.Sprintf("[GET /jobservice/pools][%d] getWorkerPoolsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetWorkerPoolsInternalServerError) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetWorkerPoolsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
