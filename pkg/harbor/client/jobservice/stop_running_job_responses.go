// Code generated by go-swagger; DO NOT EDIT.

package jobservice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/goharbor/xk6-harbor/pkg/harbor/models"
)

// StopRunningJobReader is a Reader for the StopRunningJob structure.
type StopRunningJobReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StopRunningJobReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStopRunningJobOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewStopRunningJobUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStopRunningJobForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStopRunningJobNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStopRunningJobInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /jobservice/jobs/{job_id}] stopRunningJob", response, response.Code())
	}
}

// NewStopRunningJobOK creates a StopRunningJobOK with default headers values
func NewStopRunningJobOK() *StopRunningJobOK {
	return &StopRunningJobOK{}
}

/*
StopRunningJobOK describes a response with status code 200, with default header values.

Stop worker successfully.
*/
type StopRunningJobOK struct {
}

// IsSuccess returns true when this stop running job o k response has a 2xx status code
func (o *StopRunningJobOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stop running job o k response has a 3xx status code
func (o *StopRunningJobOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop running job o k response has a 4xx status code
func (o *StopRunningJobOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this stop running job o k response has a 5xx status code
func (o *StopRunningJobOK) IsServerError() bool {
	return false
}

// IsCode returns true when this stop running job o k response a status code equal to that given
func (o *StopRunningJobOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the stop running job o k response
func (o *StopRunningJobOK) Code() int {
	return 200
}

func (o *StopRunningJobOK) Error() string {
	return fmt.Sprintf("[PUT /jobservice/jobs/{job_id}][%d] stopRunningJobOK ", 200)
}

func (o *StopRunningJobOK) String() string {
	return fmt.Sprintf("[PUT /jobservice/jobs/{job_id}][%d] stopRunningJobOK ", 200)
}

func (o *StopRunningJobOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStopRunningJobUnauthorized creates a StopRunningJobUnauthorized with default headers values
func NewStopRunningJobUnauthorized() *StopRunningJobUnauthorized {
	return &StopRunningJobUnauthorized{}
}

/*
StopRunningJobUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type StopRunningJobUnauthorized struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this stop running job unauthorized response has a 2xx status code
func (o *StopRunningJobUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop running job unauthorized response has a 3xx status code
func (o *StopRunningJobUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop running job unauthorized response has a 4xx status code
func (o *StopRunningJobUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop running job unauthorized response has a 5xx status code
func (o *StopRunningJobUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this stop running job unauthorized response a status code equal to that given
func (o *StopRunningJobUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the stop running job unauthorized response
func (o *StopRunningJobUnauthorized) Code() int {
	return 401
}

func (o *StopRunningJobUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /jobservice/jobs/{job_id}][%d] stopRunningJobUnauthorized  %+v", 401, o.Payload)
}

func (o *StopRunningJobUnauthorized) String() string {
	return fmt.Sprintf("[PUT /jobservice/jobs/{job_id}][%d] stopRunningJobUnauthorized  %+v", 401, o.Payload)
}

func (o *StopRunningJobUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *StopRunningJobUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopRunningJobForbidden creates a StopRunningJobForbidden with default headers values
func NewStopRunningJobForbidden() *StopRunningJobForbidden {
	return &StopRunningJobForbidden{}
}

/*
StopRunningJobForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type StopRunningJobForbidden struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this stop running job forbidden response has a 2xx status code
func (o *StopRunningJobForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop running job forbidden response has a 3xx status code
func (o *StopRunningJobForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop running job forbidden response has a 4xx status code
func (o *StopRunningJobForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop running job forbidden response has a 5xx status code
func (o *StopRunningJobForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this stop running job forbidden response a status code equal to that given
func (o *StopRunningJobForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the stop running job forbidden response
func (o *StopRunningJobForbidden) Code() int {
	return 403
}

func (o *StopRunningJobForbidden) Error() string {
	return fmt.Sprintf("[PUT /jobservice/jobs/{job_id}][%d] stopRunningJobForbidden  %+v", 403, o.Payload)
}

func (o *StopRunningJobForbidden) String() string {
	return fmt.Sprintf("[PUT /jobservice/jobs/{job_id}][%d] stopRunningJobForbidden  %+v", 403, o.Payload)
}

func (o *StopRunningJobForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *StopRunningJobForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopRunningJobNotFound creates a StopRunningJobNotFound with default headers values
func NewStopRunningJobNotFound() *StopRunningJobNotFound {
	return &StopRunningJobNotFound{}
}

/*
StopRunningJobNotFound describes a response with status code 404, with default header values.

Not found
*/
type StopRunningJobNotFound struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this stop running job not found response has a 2xx status code
func (o *StopRunningJobNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop running job not found response has a 3xx status code
func (o *StopRunningJobNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop running job not found response has a 4xx status code
func (o *StopRunningJobNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop running job not found response has a 5xx status code
func (o *StopRunningJobNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this stop running job not found response a status code equal to that given
func (o *StopRunningJobNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the stop running job not found response
func (o *StopRunningJobNotFound) Code() int {
	return 404
}

func (o *StopRunningJobNotFound) Error() string {
	return fmt.Sprintf("[PUT /jobservice/jobs/{job_id}][%d] stopRunningJobNotFound  %+v", 404, o.Payload)
}

func (o *StopRunningJobNotFound) String() string {
	return fmt.Sprintf("[PUT /jobservice/jobs/{job_id}][%d] stopRunningJobNotFound  %+v", 404, o.Payload)
}

func (o *StopRunningJobNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *StopRunningJobNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopRunningJobInternalServerError creates a StopRunningJobInternalServerError with default headers values
func NewStopRunningJobInternalServerError() *StopRunningJobInternalServerError {
	return &StopRunningJobInternalServerError{}
}

/*
StopRunningJobInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type StopRunningJobInternalServerError struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this stop running job internal server error response has a 2xx status code
func (o *StopRunningJobInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop running job internal server error response has a 3xx status code
func (o *StopRunningJobInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop running job internal server error response has a 4xx status code
func (o *StopRunningJobInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this stop running job internal server error response has a 5xx status code
func (o *StopRunningJobInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this stop running job internal server error response a status code equal to that given
func (o *StopRunningJobInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the stop running job internal server error response
func (o *StopRunningJobInternalServerError) Code() int {
	return 500
}

func (o *StopRunningJobInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /jobservice/jobs/{job_id}][%d] stopRunningJobInternalServerError  %+v", 500, o.Payload)
}

func (o *StopRunningJobInternalServerError) String() string {
	return fmt.Sprintf("[PUT /jobservice/jobs/{job_id}][%d] stopRunningJobInternalServerError  %+v", 500, o.Payload)
}

func (o *StopRunningJobInternalServerError) GetPayload() *models.Errors {
	return o.Payload
}

func (o *StopRunningJobInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
