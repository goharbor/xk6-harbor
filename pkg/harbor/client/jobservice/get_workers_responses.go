// Code generated by go-swagger; DO NOT EDIT.

package jobservice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/goharbor/xk6-harbor/pkg/harbor/models"
)

// GetWorkersReader is a Reader for the GetWorkers structure.
type GetWorkersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWorkersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetWorkersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetWorkersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetWorkersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetWorkersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetWorkersInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /jobservice/pools/{pool_id}/workers] getWorkers", response, response.Code())
	}
}

// NewGetWorkersOK creates a GetWorkersOK with default headers values
func NewGetWorkersOK() *GetWorkersOK {
	return &GetWorkersOK{}
}

/*
GetWorkersOK describes a response with status code 200, with default header values.

Get workers successfully.
*/
type GetWorkersOK struct {
	Payload []*models.Worker
}

// IsSuccess returns true when this get workers o k response has a 2xx status code
func (o *GetWorkersOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get workers o k response has a 3xx status code
func (o *GetWorkersOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workers o k response has a 4xx status code
func (o *GetWorkersOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get workers o k response has a 5xx status code
func (o *GetWorkersOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get workers o k response a status code equal to that given
func (o *GetWorkersOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get workers o k response
func (o *GetWorkersOK) Code() int {
	return 200
}

func (o *GetWorkersOK) Error() string {
	return fmt.Sprintf("[GET /jobservice/pools/{pool_id}/workers][%d] getWorkersOK  %+v", 200, o.Payload)
}

func (o *GetWorkersOK) String() string {
	return fmt.Sprintf("[GET /jobservice/pools/{pool_id}/workers][%d] getWorkersOK  %+v", 200, o.Payload)
}

func (o *GetWorkersOK) GetPayload() []*models.Worker {
	return o.Payload
}

func (o *GetWorkersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkersUnauthorized creates a GetWorkersUnauthorized with default headers values
func NewGetWorkersUnauthorized() *GetWorkersUnauthorized {
	return &GetWorkersUnauthorized{}
}

/*
GetWorkersUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetWorkersUnauthorized struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get workers unauthorized response has a 2xx status code
func (o *GetWorkersUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workers unauthorized response has a 3xx status code
func (o *GetWorkersUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workers unauthorized response has a 4xx status code
func (o *GetWorkersUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get workers unauthorized response has a 5xx status code
func (o *GetWorkersUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get workers unauthorized response a status code equal to that given
func (o *GetWorkersUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get workers unauthorized response
func (o *GetWorkersUnauthorized) Code() int {
	return 401
}

func (o *GetWorkersUnauthorized) Error() string {
	return fmt.Sprintf("[GET /jobservice/pools/{pool_id}/workers][%d] getWorkersUnauthorized  %+v", 401, o.Payload)
}

func (o *GetWorkersUnauthorized) String() string {
	return fmt.Sprintf("[GET /jobservice/pools/{pool_id}/workers][%d] getWorkersUnauthorized  %+v", 401, o.Payload)
}

func (o *GetWorkersUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetWorkersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkersForbidden creates a GetWorkersForbidden with default headers values
func NewGetWorkersForbidden() *GetWorkersForbidden {
	return &GetWorkersForbidden{}
}

/*
GetWorkersForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetWorkersForbidden struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get workers forbidden response has a 2xx status code
func (o *GetWorkersForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workers forbidden response has a 3xx status code
func (o *GetWorkersForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workers forbidden response has a 4xx status code
func (o *GetWorkersForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get workers forbidden response has a 5xx status code
func (o *GetWorkersForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get workers forbidden response a status code equal to that given
func (o *GetWorkersForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get workers forbidden response
func (o *GetWorkersForbidden) Code() int {
	return 403
}

func (o *GetWorkersForbidden) Error() string {
	return fmt.Sprintf("[GET /jobservice/pools/{pool_id}/workers][%d] getWorkersForbidden  %+v", 403, o.Payload)
}

func (o *GetWorkersForbidden) String() string {
	return fmt.Sprintf("[GET /jobservice/pools/{pool_id}/workers][%d] getWorkersForbidden  %+v", 403, o.Payload)
}

func (o *GetWorkersForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetWorkersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkersNotFound creates a GetWorkersNotFound with default headers values
func NewGetWorkersNotFound() *GetWorkersNotFound {
	return &GetWorkersNotFound{}
}

/*
GetWorkersNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetWorkersNotFound struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get workers not found response has a 2xx status code
func (o *GetWorkersNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workers not found response has a 3xx status code
func (o *GetWorkersNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workers not found response has a 4xx status code
func (o *GetWorkersNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get workers not found response has a 5xx status code
func (o *GetWorkersNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get workers not found response a status code equal to that given
func (o *GetWorkersNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get workers not found response
func (o *GetWorkersNotFound) Code() int {
	return 404
}

func (o *GetWorkersNotFound) Error() string {
	return fmt.Sprintf("[GET /jobservice/pools/{pool_id}/workers][%d] getWorkersNotFound  %+v", 404, o.Payload)
}

func (o *GetWorkersNotFound) String() string {
	return fmt.Sprintf("[GET /jobservice/pools/{pool_id}/workers][%d] getWorkersNotFound  %+v", 404, o.Payload)
}

func (o *GetWorkersNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetWorkersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkersInternalServerError creates a GetWorkersInternalServerError with default headers values
func NewGetWorkersInternalServerError() *GetWorkersInternalServerError {
	return &GetWorkersInternalServerError{}
}

/*
GetWorkersInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetWorkersInternalServerError struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get workers internal server error response has a 2xx status code
func (o *GetWorkersInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workers internal server error response has a 3xx status code
func (o *GetWorkersInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workers internal server error response has a 4xx status code
func (o *GetWorkersInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get workers internal server error response has a 5xx status code
func (o *GetWorkersInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get workers internal server error response a status code equal to that given
func (o *GetWorkersInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get workers internal server error response
func (o *GetWorkersInternalServerError) Code() int {
	return 500
}

func (o *GetWorkersInternalServerError) Error() string {
	return fmt.Sprintf("[GET /jobservice/pools/{pool_id}/workers][%d] getWorkersInternalServerError  %+v", 500, o.Payload)
}

func (o *GetWorkersInternalServerError) String() string {
	return fmt.Sprintf("[GET /jobservice/pools/{pool_id}/workers][%d] getWorkersInternalServerError  %+v", 500, o.Payload)
}

func (o *GetWorkersInternalServerError) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetWorkersInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
