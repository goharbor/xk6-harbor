// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"net/url"

	"github.com/go-openapi/runtime"
	rtclient "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/goharbor/xk6-harbor/pkg/harbor/client/artifact"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/auditlog"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/configure"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/gc"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/health"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/icon"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/immutable"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/jobservice"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/label"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/ldap"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/member"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/oidc"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/permissions"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/ping"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/preheat"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/project"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/project_metadata"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/purge"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/quota"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/registry"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/replication"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/repository"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/retention"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/robot"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/robotv1"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/scan"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/scan_all"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/scan_data_export"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/scanner"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/schedule"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/search"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/securityhub"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/statistic"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/system_cve_allowlist"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/systeminfo"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/user"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/usergroup"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/webhook"
	"github.com/goharbor/xk6-harbor/pkg/harbor/client/webhookjob"
)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "localhost"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/api/v2.0"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"http", "https"}

type Config struct {
	// URL is the base URL of the upstream server
	URL *url.URL
	// Transport is an inner transport for the client
	Transport http.RoundTripper
	// AuthInfo is for authentication
	AuthInfo runtime.ClientAuthInfoWriter
}

// New creates a new harbor API HTTP client.
func New(c Config) *HarborAPI {
	var (
		host     = DefaultHost
		basePath = DefaultBasePath
		schemes  = DefaultSchemes
	)

	if c.URL != nil {
		host = c.URL.Host
		basePath = c.URL.Path
		schemes = []string{c.URL.Scheme}
	}

	transport := rtclient.New(host, basePath, schemes)
	if c.Transport != nil {
		transport.Transport = c.Transport
	}

	cli := new(HarborAPI)
	cli.Transport = transport
	cli.Artifact = artifact.New(transport, strfmt.Default, c.AuthInfo)
	cli.Auditlog = auditlog.New(transport, strfmt.Default, c.AuthInfo)
	cli.Configure = configure.New(transport, strfmt.Default, c.AuthInfo)
	cli.GC = gc.New(transport, strfmt.Default, c.AuthInfo)
	cli.Health = health.New(transport, strfmt.Default, c.AuthInfo)
	cli.Icon = icon.New(transport, strfmt.Default, c.AuthInfo)
	cli.Immutable = immutable.New(transport, strfmt.Default, c.AuthInfo)
	cli.Jobservice = jobservice.New(transport, strfmt.Default, c.AuthInfo)
	cli.Label = label.New(transport, strfmt.Default, c.AuthInfo)
	cli.Ldap = ldap.New(transport, strfmt.Default, c.AuthInfo)
	cli.Member = member.New(transport, strfmt.Default, c.AuthInfo)
	cli.OIDC = oidc.New(transport, strfmt.Default, c.AuthInfo)
	cli.Permissions = permissions.New(transport, strfmt.Default, c.AuthInfo)
	cli.Ping = ping.New(transport, strfmt.Default, c.AuthInfo)
	cli.Preheat = preheat.New(transport, strfmt.Default, c.AuthInfo)
	cli.Project = project.New(transport, strfmt.Default, c.AuthInfo)
	cli.ProjectMetadata = project_metadata.New(transport, strfmt.Default, c.AuthInfo)
	cli.Purge = purge.New(transport, strfmt.Default, c.AuthInfo)
	cli.Quota = quota.New(transport, strfmt.Default, c.AuthInfo)
	cli.Registry = registry.New(transport, strfmt.Default, c.AuthInfo)
	cli.Replication = replication.New(transport, strfmt.Default, c.AuthInfo)
	cli.Repository = repository.New(transport, strfmt.Default, c.AuthInfo)
	cli.Retention = retention.New(transport, strfmt.Default, c.AuthInfo)
	cli.Robot = robot.New(transport, strfmt.Default, c.AuthInfo)
	cli.Robotv1 = robotv1.New(transport, strfmt.Default, c.AuthInfo)
	cli.Scan = scan.New(transport, strfmt.Default, c.AuthInfo)
	cli.ScanAll = scan_all.New(transport, strfmt.Default, c.AuthInfo)
	cli.ScanDataExport = scan_data_export.New(transport, strfmt.Default, c.AuthInfo)
	cli.Scanner = scanner.New(transport, strfmt.Default, c.AuthInfo)
	cli.Schedule = schedule.New(transport, strfmt.Default, c.AuthInfo)
	cli.Search = search.New(transport, strfmt.Default, c.AuthInfo)
	cli.Securityhub = securityhub.New(transport, strfmt.Default, c.AuthInfo)
	cli.Statistic = statistic.New(transport, strfmt.Default, c.AuthInfo)
	cli.SystemCVEAllowlist = system_cve_allowlist.New(transport, strfmt.Default, c.AuthInfo)
	cli.Systeminfo = systeminfo.New(transport, strfmt.Default, c.AuthInfo)
	cli.User = user.New(transport, strfmt.Default, c.AuthInfo)
	cli.Usergroup = usergroup.New(transport, strfmt.Default, c.AuthInfo)
	cli.Webhook = webhook.New(transport, strfmt.Default, c.AuthInfo)
	cli.Webhookjob = webhookjob.New(transport, strfmt.Default, c.AuthInfo)
	return cli
}

// HarborAPI is a client for harbor API
type HarborAPI struct {
	Artifact           artifact.API
	Auditlog           auditlog.API
	Configure          configure.API
	GC                 gc.API
	Health             health.API
	Icon               icon.API
	Immutable          immutable.API
	Jobservice         jobservice.API
	Label              label.API
	Ldap               ldap.API
	Member             member.API
	OIDC               oidc.API
	Permissions        permissions.API
	Ping               ping.API
	Preheat            preheat.API
	Project            project.API
	ProjectMetadata    project_metadata.API
	Purge              purge.API
	Quota              quota.API
	Registry           registry.API
	Replication        replication.API
	Repository         repository.API
	Retention          retention.API
	Robot              robot.API
	Robotv1            robotv1.API
	Scan               scan.API
	ScanAll            scan_all.API
	ScanDataExport     scan_data_export.API
	Scanner            scanner.API
	Schedule           schedule.API
	Search             search.API
	Securityhub        securityhub.API
	Statistic          statistic.API
	SystemCVEAllowlist system_cve_allowlist.API
	Systeminfo         systeminfo.API
	User               user.API
	Usergroup          usergroup.API
	Webhook            webhook.API
	Webhookjob         webhookjob.API
	Transport          runtime.ClientTransport
}
