// Code generated by go-swagger; DO NOT EDIT.

package scan_data_export

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDownloadScanDataParams creates a new DownloadScanDataParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDownloadScanDataParams() *DownloadScanDataParams {
	return &DownloadScanDataParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDownloadScanDataParamsWithTimeout creates a new DownloadScanDataParams object
// with the ability to set a timeout on a request.
func NewDownloadScanDataParamsWithTimeout(timeout time.Duration) *DownloadScanDataParams {
	return &DownloadScanDataParams{
		timeout: timeout,
	}
}

// NewDownloadScanDataParamsWithContext creates a new DownloadScanDataParams object
// with the ability to set a context for a request.
func NewDownloadScanDataParamsWithContext(ctx context.Context) *DownloadScanDataParams {
	return &DownloadScanDataParams{
		Context: ctx,
	}
}

// NewDownloadScanDataParamsWithHTTPClient creates a new DownloadScanDataParams object
// with the ability to set a custom HTTPClient for a request.
func NewDownloadScanDataParamsWithHTTPClient(client *http.Client) *DownloadScanDataParams {
	return &DownloadScanDataParams{
		HTTPClient: client,
	}
}

/*
DownloadScanDataParams contains all the parameters to send to the API endpoint

	for the download scan data operation.

	Typically these are written to a http.Request.
*/
type DownloadScanDataParams struct {

	/* XRequestID.

	   An unique ID for the request
	*/
	XRequestID *string `js:"xRequestID"`

	/* ExecutionID.

	   Execution ID
	*/
	ExecutionID int64 `js:"executionID"`

	/* Format.

	   The format of the data to be exported. e.g. CSV or PDF
	*/
	Format *string `js:"format"`

	timeout    time.Duration
	Context    context.Context `js:"context"`
	HTTPClient *http.Client    `js:"httpClient"`
}

// WithDefaults hydrates default values in the download scan data params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DownloadScanDataParams) WithDefaults() *DownloadScanDataParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the download scan data params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DownloadScanDataParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the download scan data params
func (o *DownloadScanDataParams) WithTimeout(timeout time.Duration) *DownloadScanDataParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the download scan data params
func (o *DownloadScanDataParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the download scan data params
func (o *DownloadScanDataParams) WithContext(ctx context.Context) *DownloadScanDataParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the download scan data params
func (o *DownloadScanDataParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the download scan data params
func (o *DownloadScanDataParams) WithHTTPClient(client *http.Client) *DownloadScanDataParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the download scan data params
func (o *DownloadScanDataParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXRequestID adds the xRequestID to the download scan data params
func (o *DownloadScanDataParams) WithXRequestID(xRequestID *string) *DownloadScanDataParams {
	o.SetXRequestID(xRequestID)
	return o
}

// SetXRequestID adds the xRequestId to the download scan data params
func (o *DownloadScanDataParams) SetXRequestID(xRequestID *string) {
	o.XRequestID = xRequestID
}

// WithExecutionID adds the executionID to the download scan data params
func (o *DownloadScanDataParams) WithExecutionID(executionID int64) *DownloadScanDataParams {
	o.SetExecutionID(executionID)
	return o
}

// SetExecutionID adds the executionId to the download scan data params
func (o *DownloadScanDataParams) SetExecutionID(executionID int64) {
	o.ExecutionID = executionID
}

// WithFormat adds the format to the download scan data params
func (o *DownloadScanDataParams) WithFormat(format *string) *DownloadScanDataParams {
	o.SetFormat(format)
	return o
}

// SetFormat adds the format to the download scan data params
func (o *DownloadScanDataParams) SetFormat(format *string) {
	o.Format = format
}

// WriteToRequest writes these params to a swagger request
func (o *DownloadScanDataParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XRequestID != nil {

		// header param X-Request-Id
		if err := r.SetHeaderParam("X-Request-Id", *o.XRequestID); err != nil {
			return err
		}
	}

	// path param execution_id
	if err := r.SetPathParam("execution_id", swag.FormatInt64(o.ExecutionID)); err != nil {
		return err
	}

	if o.Format != nil {

		// query param format
		var qrFormat string

		if o.Format != nil {
			qrFormat = *o.Format
		}
		qFormat := qrFormat
		if qFormat != "" {

			if err := r.SetQueryParam("format", qFormat); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
