// Code generated by go-swagger; DO NOT EDIT.

package scan_data_export

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/goharbor/xk6-harbor/pkg/harbor/models"
)

// ExportScanDataReader is a Reader for the ExportScanData structure.
type ExportScanDataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExportScanDataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExportScanDataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExportScanDataBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewExportScanDataUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExportScanDataForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewExportScanDataNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewExportScanDataMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewExportScanDataConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExportScanDataInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /export/cve] exportScanData", response, response.Code())
	}
}

// NewExportScanDataOK creates a ExportScanDataOK with default headers values
func NewExportScanDataOK() *ExportScanDataOK {
	return &ExportScanDataOK{}
}

/*
ExportScanDataOK describes a response with status code 200, with default header values.

Success.
*/
type ExportScanDataOK struct {
	Payload *models.ScanDataExportJob
}

// IsSuccess returns true when this export scan data o k response has a 2xx status code
func (o *ExportScanDataOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this export scan data o k response has a 3xx status code
func (o *ExportScanDataOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this export scan data o k response has a 4xx status code
func (o *ExportScanDataOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this export scan data o k response has a 5xx status code
func (o *ExportScanDataOK) IsServerError() bool {
	return false
}

// IsCode returns true when this export scan data o k response a status code equal to that given
func (o *ExportScanDataOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the export scan data o k response
func (o *ExportScanDataOK) Code() int {
	return 200
}

func (o *ExportScanDataOK) Error() string {
	return fmt.Sprintf("[POST /export/cve][%d] exportScanDataOK  %+v", 200, o.Payload)
}

func (o *ExportScanDataOK) String() string {
	return fmt.Sprintf("[POST /export/cve][%d] exportScanDataOK  %+v", 200, o.Payload)
}

func (o *ExportScanDataOK) GetPayload() *models.ScanDataExportJob {
	return o.Payload
}

func (o *ExportScanDataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ScanDataExportJob)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportScanDataBadRequest creates a ExportScanDataBadRequest with default headers values
func NewExportScanDataBadRequest() *ExportScanDataBadRequest {
	return &ExportScanDataBadRequest{}
}

/*
ExportScanDataBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ExportScanDataBadRequest struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this export scan data bad request response has a 2xx status code
func (o *ExportScanDataBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this export scan data bad request response has a 3xx status code
func (o *ExportScanDataBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this export scan data bad request response has a 4xx status code
func (o *ExportScanDataBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this export scan data bad request response has a 5xx status code
func (o *ExportScanDataBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this export scan data bad request response a status code equal to that given
func (o *ExportScanDataBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the export scan data bad request response
func (o *ExportScanDataBadRequest) Code() int {
	return 400
}

func (o *ExportScanDataBadRequest) Error() string {
	return fmt.Sprintf("[POST /export/cve][%d] exportScanDataBadRequest  %+v", 400, o.Payload)
}

func (o *ExportScanDataBadRequest) String() string {
	return fmt.Sprintf("[POST /export/cve][%d] exportScanDataBadRequest  %+v", 400, o.Payload)
}

func (o *ExportScanDataBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ExportScanDataBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportScanDataUnauthorized creates a ExportScanDataUnauthorized with default headers values
func NewExportScanDataUnauthorized() *ExportScanDataUnauthorized {
	return &ExportScanDataUnauthorized{}
}

/*
ExportScanDataUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ExportScanDataUnauthorized struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this export scan data unauthorized response has a 2xx status code
func (o *ExportScanDataUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this export scan data unauthorized response has a 3xx status code
func (o *ExportScanDataUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this export scan data unauthorized response has a 4xx status code
func (o *ExportScanDataUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this export scan data unauthorized response has a 5xx status code
func (o *ExportScanDataUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this export scan data unauthorized response a status code equal to that given
func (o *ExportScanDataUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the export scan data unauthorized response
func (o *ExportScanDataUnauthorized) Code() int {
	return 401
}

func (o *ExportScanDataUnauthorized) Error() string {
	return fmt.Sprintf("[POST /export/cve][%d] exportScanDataUnauthorized  %+v", 401, o.Payload)
}

func (o *ExportScanDataUnauthorized) String() string {
	return fmt.Sprintf("[POST /export/cve][%d] exportScanDataUnauthorized  %+v", 401, o.Payload)
}

func (o *ExportScanDataUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ExportScanDataUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportScanDataForbidden creates a ExportScanDataForbidden with default headers values
func NewExportScanDataForbidden() *ExportScanDataForbidden {
	return &ExportScanDataForbidden{}
}

/*
ExportScanDataForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ExportScanDataForbidden struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this export scan data forbidden response has a 2xx status code
func (o *ExportScanDataForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this export scan data forbidden response has a 3xx status code
func (o *ExportScanDataForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this export scan data forbidden response has a 4xx status code
func (o *ExportScanDataForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this export scan data forbidden response has a 5xx status code
func (o *ExportScanDataForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this export scan data forbidden response a status code equal to that given
func (o *ExportScanDataForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the export scan data forbidden response
func (o *ExportScanDataForbidden) Code() int {
	return 403
}

func (o *ExportScanDataForbidden) Error() string {
	return fmt.Sprintf("[POST /export/cve][%d] exportScanDataForbidden  %+v", 403, o.Payload)
}

func (o *ExportScanDataForbidden) String() string {
	return fmt.Sprintf("[POST /export/cve][%d] exportScanDataForbidden  %+v", 403, o.Payload)
}

func (o *ExportScanDataForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ExportScanDataForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportScanDataNotFound creates a ExportScanDataNotFound with default headers values
func NewExportScanDataNotFound() *ExportScanDataNotFound {
	return &ExportScanDataNotFound{}
}

/*
ExportScanDataNotFound describes a response with status code 404, with default header values.

Not found
*/
type ExportScanDataNotFound struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this export scan data not found response has a 2xx status code
func (o *ExportScanDataNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this export scan data not found response has a 3xx status code
func (o *ExportScanDataNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this export scan data not found response has a 4xx status code
func (o *ExportScanDataNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this export scan data not found response has a 5xx status code
func (o *ExportScanDataNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this export scan data not found response a status code equal to that given
func (o *ExportScanDataNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the export scan data not found response
func (o *ExportScanDataNotFound) Code() int {
	return 404
}

func (o *ExportScanDataNotFound) Error() string {
	return fmt.Sprintf("[POST /export/cve][%d] exportScanDataNotFound  %+v", 404, o.Payload)
}

func (o *ExportScanDataNotFound) String() string {
	return fmt.Sprintf("[POST /export/cve][%d] exportScanDataNotFound  %+v", 404, o.Payload)
}

func (o *ExportScanDataNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ExportScanDataNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportScanDataMethodNotAllowed creates a ExportScanDataMethodNotAllowed with default headers values
func NewExportScanDataMethodNotAllowed() *ExportScanDataMethodNotAllowed {
	return &ExportScanDataMethodNotAllowed{}
}

/*
ExportScanDataMethodNotAllowed describes a response with status code 405, with default header values.

Method not allowed
*/
type ExportScanDataMethodNotAllowed struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this export scan data method not allowed response has a 2xx status code
func (o *ExportScanDataMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this export scan data method not allowed response has a 3xx status code
func (o *ExportScanDataMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this export scan data method not allowed response has a 4xx status code
func (o *ExportScanDataMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this export scan data method not allowed response has a 5xx status code
func (o *ExportScanDataMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this export scan data method not allowed response a status code equal to that given
func (o *ExportScanDataMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the export scan data method not allowed response
func (o *ExportScanDataMethodNotAllowed) Code() int {
	return 405
}

func (o *ExportScanDataMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /export/cve][%d] exportScanDataMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *ExportScanDataMethodNotAllowed) String() string {
	return fmt.Sprintf("[POST /export/cve][%d] exportScanDataMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *ExportScanDataMethodNotAllowed) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ExportScanDataMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportScanDataConflict creates a ExportScanDataConflict with default headers values
func NewExportScanDataConflict() *ExportScanDataConflict {
	return &ExportScanDataConflict{}
}

/*
ExportScanDataConflict describes a response with status code 409, with default header values.

Conflict
*/
type ExportScanDataConflict struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this export scan data conflict response has a 2xx status code
func (o *ExportScanDataConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this export scan data conflict response has a 3xx status code
func (o *ExportScanDataConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this export scan data conflict response has a 4xx status code
func (o *ExportScanDataConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this export scan data conflict response has a 5xx status code
func (o *ExportScanDataConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this export scan data conflict response a status code equal to that given
func (o *ExportScanDataConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the export scan data conflict response
func (o *ExportScanDataConflict) Code() int {
	return 409
}

func (o *ExportScanDataConflict) Error() string {
	return fmt.Sprintf("[POST /export/cve][%d] exportScanDataConflict  %+v", 409, o.Payload)
}

func (o *ExportScanDataConflict) String() string {
	return fmt.Sprintf("[POST /export/cve][%d] exportScanDataConflict  %+v", 409, o.Payload)
}

func (o *ExportScanDataConflict) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ExportScanDataConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportScanDataInternalServerError creates a ExportScanDataInternalServerError with default headers values
func NewExportScanDataInternalServerError() *ExportScanDataInternalServerError {
	return &ExportScanDataInternalServerError{}
}

/*
ExportScanDataInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type ExportScanDataInternalServerError struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this export scan data internal server error response has a 2xx status code
func (o *ExportScanDataInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this export scan data internal server error response has a 3xx status code
func (o *ExportScanDataInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this export scan data internal server error response has a 4xx status code
func (o *ExportScanDataInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this export scan data internal server error response has a 5xx status code
func (o *ExportScanDataInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this export scan data internal server error response a status code equal to that given
func (o *ExportScanDataInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the export scan data internal server error response
func (o *ExportScanDataInternalServerError) Code() int {
	return 500
}

func (o *ExportScanDataInternalServerError) Error() string {
	return fmt.Sprintf("[POST /export/cve][%d] exportScanDataInternalServerError  %+v", 500, o.Payload)
}

func (o *ExportScanDataInternalServerError) String() string {
	return fmt.Sprintf("[POST /export/cve][%d] exportScanDataInternalServerError  %+v", 500, o.Payload)
}

func (o *ExportScanDataInternalServerError) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ExportScanDataInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
