// Code generated by go-swagger; DO NOT EDIT.

package purge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/goharbor/xk6-harbor/pkg/harbor/models"
)

// CreatePurgeScheduleReader is a Reader for the CreatePurgeSchedule structure.
type CreatePurgeScheduleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreatePurgeScheduleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreatePurgeScheduleCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreatePurgeScheduleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreatePurgeScheduleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreatePurgeScheduleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreatePurgeScheduleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /system/purgeaudit/schedule] createPurgeSchedule", response, response.Code())
	}
}

// NewCreatePurgeScheduleCreated creates a CreatePurgeScheduleCreated with default headers values
func NewCreatePurgeScheduleCreated() *CreatePurgeScheduleCreated {
	return &CreatePurgeScheduleCreated{}
}

/*
CreatePurgeScheduleCreated describes a response with status code 201, with default header values.

Created
*/
type CreatePurgeScheduleCreated struct {

	/* The location of the resource
	 */
	Location string

	/* The ID of the corresponding request for the response
	 */
	XRequestID string
}

// IsSuccess returns true when this create purge schedule created response has a 2xx status code
func (o *CreatePurgeScheduleCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create purge schedule created response has a 3xx status code
func (o *CreatePurgeScheduleCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create purge schedule created response has a 4xx status code
func (o *CreatePurgeScheduleCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create purge schedule created response has a 5xx status code
func (o *CreatePurgeScheduleCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create purge schedule created response a status code equal to that given
func (o *CreatePurgeScheduleCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create purge schedule created response
func (o *CreatePurgeScheduleCreated) Code() int {
	return 201
}

func (o *CreatePurgeScheduleCreated) Error() string {
	return fmt.Sprintf("[POST /system/purgeaudit/schedule][%d] createPurgeScheduleCreated ", 201)
}

func (o *CreatePurgeScheduleCreated) String() string {
	return fmt.Sprintf("[POST /system/purgeaudit/schedule][%d] createPurgeScheduleCreated ", 201)
}

func (o *CreatePurgeScheduleCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Location
	hdrLocation := response.GetHeader("Location")

	if hdrLocation != "" {
		o.Location = hdrLocation
	}

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	return nil
}

// NewCreatePurgeScheduleBadRequest creates a CreatePurgeScheduleBadRequest with default headers values
func NewCreatePurgeScheduleBadRequest() *CreatePurgeScheduleBadRequest {
	return &CreatePurgeScheduleBadRequest{}
}

/*
CreatePurgeScheduleBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type CreatePurgeScheduleBadRequest struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this create purge schedule bad request response has a 2xx status code
func (o *CreatePurgeScheduleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create purge schedule bad request response has a 3xx status code
func (o *CreatePurgeScheduleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create purge schedule bad request response has a 4xx status code
func (o *CreatePurgeScheduleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create purge schedule bad request response has a 5xx status code
func (o *CreatePurgeScheduleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create purge schedule bad request response a status code equal to that given
func (o *CreatePurgeScheduleBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create purge schedule bad request response
func (o *CreatePurgeScheduleBadRequest) Code() int {
	return 400
}

func (o *CreatePurgeScheduleBadRequest) Error() string {
	return fmt.Sprintf("[POST /system/purgeaudit/schedule][%d] createPurgeScheduleBadRequest  %+v", 400, o.Payload)
}

func (o *CreatePurgeScheduleBadRequest) String() string {
	return fmt.Sprintf("[POST /system/purgeaudit/schedule][%d] createPurgeScheduleBadRequest  %+v", 400, o.Payload)
}

func (o *CreatePurgeScheduleBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *CreatePurgeScheduleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePurgeScheduleUnauthorized creates a CreatePurgeScheduleUnauthorized with default headers values
func NewCreatePurgeScheduleUnauthorized() *CreatePurgeScheduleUnauthorized {
	return &CreatePurgeScheduleUnauthorized{}
}

/*
CreatePurgeScheduleUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CreatePurgeScheduleUnauthorized struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this create purge schedule unauthorized response has a 2xx status code
func (o *CreatePurgeScheduleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create purge schedule unauthorized response has a 3xx status code
func (o *CreatePurgeScheduleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create purge schedule unauthorized response has a 4xx status code
func (o *CreatePurgeScheduleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create purge schedule unauthorized response has a 5xx status code
func (o *CreatePurgeScheduleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create purge schedule unauthorized response a status code equal to that given
func (o *CreatePurgeScheduleUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the create purge schedule unauthorized response
func (o *CreatePurgeScheduleUnauthorized) Code() int {
	return 401
}

func (o *CreatePurgeScheduleUnauthorized) Error() string {
	return fmt.Sprintf("[POST /system/purgeaudit/schedule][%d] createPurgeScheduleUnauthorized  %+v", 401, o.Payload)
}

func (o *CreatePurgeScheduleUnauthorized) String() string {
	return fmt.Sprintf("[POST /system/purgeaudit/schedule][%d] createPurgeScheduleUnauthorized  %+v", 401, o.Payload)
}

func (o *CreatePurgeScheduleUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *CreatePurgeScheduleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePurgeScheduleForbidden creates a CreatePurgeScheduleForbidden with default headers values
func NewCreatePurgeScheduleForbidden() *CreatePurgeScheduleForbidden {
	return &CreatePurgeScheduleForbidden{}
}

/*
CreatePurgeScheduleForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CreatePurgeScheduleForbidden struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this create purge schedule forbidden response has a 2xx status code
func (o *CreatePurgeScheduleForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create purge schedule forbidden response has a 3xx status code
func (o *CreatePurgeScheduleForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create purge schedule forbidden response has a 4xx status code
func (o *CreatePurgeScheduleForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create purge schedule forbidden response has a 5xx status code
func (o *CreatePurgeScheduleForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create purge schedule forbidden response a status code equal to that given
func (o *CreatePurgeScheduleForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create purge schedule forbidden response
func (o *CreatePurgeScheduleForbidden) Code() int {
	return 403
}

func (o *CreatePurgeScheduleForbidden) Error() string {
	return fmt.Sprintf("[POST /system/purgeaudit/schedule][%d] createPurgeScheduleForbidden  %+v", 403, o.Payload)
}

func (o *CreatePurgeScheduleForbidden) String() string {
	return fmt.Sprintf("[POST /system/purgeaudit/schedule][%d] createPurgeScheduleForbidden  %+v", 403, o.Payload)
}

func (o *CreatePurgeScheduleForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *CreatePurgeScheduleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePurgeScheduleInternalServerError creates a CreatePurgeScheduleInternalServerError with default headers values
func NewCreatePurgeScheduleInternalServerError() *CreatePurgeScheduleInternalServerError {
	return &CreatePurgeScheduleInternalServerError{}
}

/*
CreatePurgeScheduleInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type CreatePurgeScheduleInternalServerError struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this create purge schedule internal server error response has a 2xx status code
func (o *CreatePurgeScheduleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create purge schedule internal server error response has a 3xx status code
func (o *CreatePurgeScheduleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create purge schedule internal server error response has a 4xx status code
func (o *CreatePurgeScheduleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create purge schedule internal server error response has a 5xx status code
func (o *CreatePurgeScheduleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create purge schedule internal server error response a status code equal to that given
func (o *CreatePurgeScheduleInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create purge schedule internal server error response
func (o *CreatePurgeScheduleInternalServerError) Code() int {
	return 500
}

func (o *CreatePurgeScheduleInternalServerError) Error() string {
	return fmt.Sprintf("[POST /system/purgeaudit/schedule][%d] createPurgeScheduleInternalServerError  %+v", 500, o.Payload)
}

func (o *CreatePurgeScheduleInternalServerError) String() string {
	return fmt.Sprintf("[POST /system/purgeaudit/schedule][%d] createPurgeScheduleInternalServerError  %+v", 500, o.Payload)
}

func (o *CreatePurgeScheduleInternalServerError) GetPayload() *models.Errors {
	return o.Payload
}

func (o *CreatePurgeScheduleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
