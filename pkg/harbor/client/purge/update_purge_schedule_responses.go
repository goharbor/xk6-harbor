// Code generated by go-swagger; DO NOT EDIT.

package purge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/goharbor/xk6-harbor/pkg/harbor/models"
)

// UpdatePurgeScheduleReader is a Reader for the UpdatePurgeSchedule structure.
type UpdatePurgeScheduleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdatePurgeScheduleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdatePurgeScheduleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdatePurgeScheduleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdatePurgeScheduleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdatePurgeScheduleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdatePurgeScheduleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /system/purgeaudit/schedule] updatePurgeSchedule", response, response.Code())
	}
}

// NewUpdatePurgeScheduleOK creates a UpdatePurgeScheduleOK with default headers values
func NewUpdatePurgeScheduleOK() *UpdatePurgeScheduleOK {
	return &UpdatePurgeScheduleOK{}
}

/*
UpdatePurgeScheduleOK describes a response with status code 200, with default header values.

Updated purge's schedule successfully.
*/
type UpdatePurgeScheduleOK struct {
}

// IsSuccess returns true when this update purge schedule o k response has a 2xx status code
func (o *UpdatePurgeScheduleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update purge schedule o k response has a 3xx status code
func (o *UpdatePurgeScheduleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update purge schedule o k response has a 4xx status code
func (o *UpdatePurgeScheduleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update purge schedule o k response has a 5xx status code
func (o *UpdatePurgeScheduleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update purge schedule o k response a status code equal to that given
func (o *UpdatePurgeScheduleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update purge schedule o k response
func (o *UpdatePurgeScheduleOK) Code() int {
	return 200
}

func (o *UpdatePurgeScheduleOK) Error() string {
	return fmt.Sprintf("[PUT /system/purgeaudit/schedule][%d] updatePurgeScheduleOK ", 200)
}

func (o *UpdatePurgeScheduleOK) String() string {
	return fmt.Sprintf("[PUT /system/purgeaudit/schedule][%d] updatePurgeScheduleOK ", 200)
}

func (o *UpdatePurgeScheduleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatePurgeScheduleBadRequest creates a UpdatePurgeScheduleBadRequest with default headers values
func NewUpdatePurgeScheduleBadRequest() *UpdatePurgeScheduleBadRequest {
	return &UpdatePurgeScheduleBadRequest{}
}

/*
UpdatePurgeScheduleBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdatePurgeScheduleBadRequest struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this update purge schedule bad request response has a 2xx status code
func (o *UpdatePurgeScheduleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update purge schedule bad request response has a 3xx status code
func (o *UpdatePurgeScheduleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update purge schedule bad request response has a 4xx status code
func (o *UpdatePurgeScheduleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update purge schedule bad request response has a 5xx status code
func (o *UpdatePurgeScheduleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update purge schedule bad request response a status code equal to that given
func (o *UpdatePurgeScheduleBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update purge schedule bad request response
func (o *UpdatePurgeScheduleBadRequest) Code() int {
	return 400
}

func (o *UpdatePurgeScheduleBadRequest) Error() string {
	return fmt.Sprintf("[PUT /system/purgeaudit/schedule][%d] updatePurgeScheduleBadRequest  %+v", 400, o.Payload)
}

func (o *UpdatePurgeScheduleBadRequest) String() string {
	return fmt.Sprintf("[PUT /system/purgeaudit/schedule][%d] updatePurgeScheduleBadRequest  %+v", 400, o.Payload)
}

func (o *UpdatePurgeScheduleBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdatePurgeScheduleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePurgeScheduleUnauthorized creates a UpdatePurgeScheduleUnauthorized with default headers values
func NewUpdatePurgeScheduleUnauthorized() *UpdatePurgeScheduleUnauthorized {
	return &UpdatePurgeScheduleUnauthorized{}
}

/*
UpdatePurgeScheduleUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdatePurgeScheduleUnauthorized struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this update purge schedule unauthorized response has a 2xx status code
func (o *UpdatePurgeScheduleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update purge schedule unauthorized response has a 3xx status code
func (o *UpdatePurgeScheduleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update purge schedule unauthorized response has a 4xx status code
func (o *UpdatePurgeScheduleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update purge schedule unauthorized response has a 5xx status code
func (o *UpdatePurgeScheduleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update purge schedule unauthorized response a status code equal to that given
func (o *UpdatePurgeScheduleUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update purge schedule unauthorized response
func (o *UpdatePurgeScheduleUnauthorized) Code() int {
	return 401
}

func (o *UpdatePurgeScheduleUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /system/purgeaudit/schedule][%d] updatePurgeScheduleUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdatePurgeScheduleUnauthorized) String() string {
	return fmt.Sprintf("[PUT /system/purgeaudit/schedule][%d] updatePurgeScheduleUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdatePurgeScheduleUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdatePurgeScheduleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePurgeScheduleForbidden creates a UpdatePurgeScheduleForbidden with default headers values
func NewUpdatePurgeScheduleForbidden() *UpdatePurgeScheduleForbidden {
	return &UpdatePurgeScheduleForbidden{}
}

/*
UpdatePurgeScheduleForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdatePurgeScheduleForbidden struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this update purge schedule forbidden response has a 2xx status code
func (o *UpdatePurgeScheduleForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update purge schedule forbidden response has a 3xx status code
func (o *UpdatePurgeScheduleForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update purge schedule forbidden response has a 4xx status code
func (o *UpdatePurgeScheduleForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update purge schedule forbidden response has a 5xx status code
func (o *UpdatePurgeScheduleForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update purge schedule forbidden response a status code equal to that given
func (o *UpdatePurgeScheduleForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update purge schedule forbidden response
func (o *UpdatePurgeScheduleForbidden) Code() int {
	return 403
}

func (o *UpdatePurgeScheduleForbidden) Error() string {
	return fmt.Sprintf("[PUT /system/purgeaudit/schedule][%d] updatePurgeScheduleForbidden  %+v", 403, o.Payload)
}

func (o *UpdatePurgeScheduleForbidden) String() string {
	return fmt.Sprintf("[PUT /system/purgeaudit/schedule][%d] updatePurgeScheduleForbidden  %+v", 403, o.Payload)
}

func (o *UpdatePurgeScheduleForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdatePurgeScheduleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePurgeScheduleInternalServerError creates a UpdatePurgeScheduleInternalServerError with default headers values
func NewUpdatePurgeScheduleInternalServerError() *UpdatePurgeScheduleInternalServerError {
	return &UpdatePurgeScheduleInternalServerError{}
}

/*
UpdatePurgeScheduleInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type UpdatePurgeScheduleInternalServerError struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this update purge schedule internal server error response has a 2xx status code
func (o *UpdatePurgeScheduleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update purge schedule internal server error response has a 3xx status code
func (o *UpdatePurgeScheduleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update purge schedule internal server error response has a 4xx status code
func (o *UpdatePurgeScheduleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update purge schedule internal server error response has a 5xx status code
func (o *UpdatePurgeScheduleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update purge schedule internal server error response a status code equal to that given
func (o *UpdatePurgeScheduleInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update purge schedule internal server error response
func (o *UpdatePurgeScheduleInternalServerError) Code() int {
	return 500
}

func (o *UpdatePurgeScheduleInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /system/purgeaudit/schedule][%d] updatePurgeScheduleInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdatePurgeScheduleInternalServerError) String() string {
	return fmt.Sprintf("[PUT /system/purgeaudit/schedule][%d] updatePurgeScheduleInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdatePurgeScheduleInternalServerError) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdatePurgeScheduleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
