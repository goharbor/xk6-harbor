// Code generated by go-swagger; DO NOT EDIT.

package purge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/goharbor/xk6-harbor/pkg/harbor/models"
)

// GetPurgeHistoryReader is a Reader for the GetPurgeHistory structure.
type GetPurgeHistoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPurgeHistoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPurgeHistoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetPurgeHistoryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetPurgeHistoryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetPurgeHistoryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /system/purgeaudit] getPurgeHistory", response, response.Code())
	}
}

// NewGetPurgeHistoryOK creates a GetPurgeHistoryOK with default headers values
func NewGetPurgeHistoryOK() *GetPurgeHistoryOK {
	return &GetPurgeHistoryOK{}
}

/*
GetPurgeHistoryOK describes a response with status code 200, with default header values.

Get purge job results successfully.
*/
type GetPurgeHistoryOK struct {

	/* Link refers to the previous page and next page
	 */
	Link string

	/* The total count of history
	 */
	XTotalCount int64

	Payload []*models.ExecHistory
}

// IsSuccess returns true when this get purge history o k response has a 2xx status code
func (o *GetPurgeHistoryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get purge history o k response has a 3xx status code
func (o *GetPurgeHistoryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get purge history o k response has a 4xx status code
func (o *GetPurgeHistoryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get purge history o k response has a 5xx status code
func (o *GetPurgeHistoryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get purge history o k response a status code equal to that given
func (o *GetPurgeHistoryOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get purge history o k response
func (o *GetPurgeHistoryOK) Code() int {
	return 200
}

func (o *GetPurgeHistoryOK) Error() string {
	return fmt.Sprintf("[GET /system/purgeaudit][%d] getPurgeHistoryOK  %+v", 200, o.Payload)
}

func (o *GetPurgeHistoryOK) String() string {
	return fmt.Sprintf("[GET /system/purgeaudit][%d] getPurgeHistoryOK  %+v", 200, o.Payload)
}

func (o *GetPurgeHistoryOK) GetPayload() []*models.ExecHistory {
	return o.Payload
}

func (o *GetPurgeHistoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Link
	hdrLink := response.GetHeader("Link")

	if hdrLink != "" {
		o.Link = hdrLink
	}

	// hydrates response header X-Total-Count
	hdrXTotalCount := response.GetHeader("X-Total-Count")

	if hdrXTotalCount != "" {
		valxTotalCount, err := swag.ConvertInt64(hdrXTotalCount)
		if err != nil {
			return errors.InvalidType("X-Total-Count", "header", "int64", hdrXTotalCount)
		}
		o.XTotalCount = valxTotalCount
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPurgeHistoryUnauthorized creates a GetPurgeHistoryUnauthorized with default headers values
func NewGetPurgeHistoryUnauthorized() *GetPurgeHistoryUnauthorized {
	return &GetPurgeHistoryUnauthorized{}
}

/*
GetPurgeHistoryUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetPurgeHistoryUnauthorized struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get purge history unauthorized response has a 2xx status code
func (o *GetPurgeHistoryUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get purge history unauthorized response has a 3xx status code
func (o *GetPurgeHistoryUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get purge history unauthorized response has a 4xx status code
func (o *GetPurgeHistoryUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get purge history unauthorized response has a 5xx status code
func (o *GetPurgeHistoryUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get purge history unauthorized response a status code equal to that given
func (o *GetPurgeHistoryUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get purge history unauthorized response
func (o *GetPurgeHistoryUnauthorized) Code() int {
	return 401
}

func (o *GetPurgeHistoryUnauthorized) Error() string {
	return fmt.Sprintf("[GET /system/purgeaudit][%d] getPurgeHistoryUnauthorized  %+v", 401, o.Payload)
}

func (o *GetPurgeHistoryUnauthorized) String() string {
	return fmt.Sprintf("[GET /system/purgeaudit][%d] getPurgeHistoryUnauthorized  %+v", 401, o.Payload)
}

func (o *GetPurgeHistoryUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetPurgeHistoryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPurgeHistoryForbidden creates a GetPurgeHistoryForbidden with default headers values
func NewGetPurgeHistoryForbidden() *GetPurgeHistoryForbidden {
	return &GetPurgeHistoryForbidden{}
}

/*
GetPurgeHistoryForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetPurgeHistoryForbidden struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get purge history forbidden response has a 2xx status code
func (o *GetPurgeHistoryForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get purge history forbidden response has a 3xx status code
func (o *GetPurgeHistoryForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get purge history forbidden response has a 4xx status code
func (o *GetPurgeHistoryForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get purge history forbidden response has a 5xx status code
func (o *GetPurgeHistoryForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get purge history forbidden response a status code equal to that given
func (o *GetPurgeHistoryForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get purge history forbidden response
func (o *GetPurgeHistoryForbidden) Code() int {
	return 403
}

func (o *GetPurgeHistoryForbidden) Error() string {
	return fmt.Sprintf("[GET /system/purgeaudit][%d] getPurgeHistoryForbidden  %+v", 403, o.Payload)
}

func (o *GetPurgeHistoryForbidden) String() string {
	return fmt.Sprintf("[GET /system/purgeaudit][%d] getPurgeHistoryForbidden  %+v", 403, o.Payload)
}

func (o *GetPurgeHistoryForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetPurgeHistoryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPurgeHistoryInternalServerError creates a GetPurgeHistoryInternalServerError with default headers values
func NewGetPurgeHistoryInternalServerError() *GetPurgeHistoryInternalServerError {
	return &GetPurgeHistoryInternalServerError{}
}

/*
GetPurgeHistoryInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetPurgeHistoryInternalServerError struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get purge history internal server error response has a 2xx status code
func (o *GetPurgeHistoryInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get purge history internal server error response has a 3xx status code
func (o *GetPurgeHistoryInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get purge history internal server error response has a 4xx status code
func (o *GetPurgeHistoryInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get purge history internal server error response has a 5xx status code
func (o *GetPurgeHistoryInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get purge history internal server error response a status code equal to that given
func (o *GetPurgeHistoryInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get purge history internal server error response
func (o *GetPurgeHistoryInternalServerError) Code() int {
	return 500
}

func (o *GetPurgeHistoryInternalServerError) Error() string {
	return fmt.Sprintf("[GET /system/purgeaudit][%d] getPurgeHistoryInternalServerError  %+v", 500, o.Payload)
}

func (o *GetPurgeHistoryInternalServerError) String() string {
	return fmt.Sprintf("[GET /system/purgeaudit][%d] getPurgeHistoryInternalServerError  %+v", 500, o.Payload)
}

func (o *GetPurgeHistoryInternalServerError) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetPurgeHistoryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
