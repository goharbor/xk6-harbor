// Code generated by go-swagger; DO NOT EDIT.

package securityhub

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/goharbor/xk6-harbor/pkg/harbor/models"
)

// ListVulnerabilitiesReader is a Reader for the ListVulnerabilities structure.
type ListVulnerabilitiesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListVulnerabilitiesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListVulnerabilitiesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListVulnerabilitiesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListVulnerabilitiesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListVulnerabilitiesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /security/vul] ListVulnerabilities", response, response.Code())
	}
}

// NewListVulnerabilitiesOK creates a ListVulnerabilitiesOK with default headers values
func NewListVulnerabilitiesOK() *ListVulnerabilitiesOK {
	return &ListVulnerabilitiesOK{}
}

/*
ListVulnerabilitiesOK describes a response with status code 200, with default header values.

The vulnerability list.
*/
type ListVulnerabilitiesOK struct {

	/* Link refers to the previous page and next page
	 */
	Link string

	/* The total count of vulnerabilities
	 */
	XTotalCount int64

	Payload []*models.VulnerabilityItem
}

// IsSuccess returns true when this list vulnerabilities o k response has a 2xx status code
func (o *ListVulnerabilitiesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list vulnerabilities o k response has a 3xx status code
func (o *ListVulnerabilitiesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list vulnerabilities o k response has a 4xx status code
func (o *ListVulnerabilitiesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list vulnerabilities o k response has a 5xx status code
func (o *ListVulnerabilitiesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list vulnerabilities o k response a status code equal to that given
func (o *ListVulnerabilitiesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list vulnerabilities o k response
func (o *ListVulnerabilitiesOK) Code() int {
	return 200
}

func (o *ListVulnerabilitiesOK) Error() string {
	return fmt.Sprintf("[GET /security/vul][%d] listVulnerabilitiesOK  %+v", 200, o.Payload)
}

func (o *ListVulnerabilitiesOK) String() string {
	return fmt.Sprintf("[GET /security/vul][%d] listVulnerabilitiesOK  %+v", 200, o.Payload)
}

func (o *ListVulnerabilitiesOK) GetPayload() []*models.VulnerabilityItem {
	return o.Payload
}

func (o *ListVulnerabilitiesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Link
	hdrLink := response.GetHeader("Link")

	if hdrLink != "" {
		o.Link = hdrLink
	}

	// hydrates response header X-Total-Count
	hdrXTotalCount := response.GetHeader("X-Total-Count")

	if hdrXTotalCount != "" {
		valxTotalCount, err := swag.ConvertInt64(hdrXTotalCount)
		if err != nil {
			return errors.InvalidType("X-Total-Count", "header", "int64", hdrXTotalCount)
		}
		o.XTotalCount = valxTotalCount
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListVulnerabilitiesBadRequest creates a ListVulnerabilitiesBadRequest with default headers values
func NewListVulnerabilitiesBadRequest() *ListVulnerabilitiesBadRequest {
	return &ListVulnerabilitiesBadRequest{}
}

/*
ListVulnerabilitiesBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ListVulnerabilitiesBadRequest struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this list vulnerabilities bad request response has a 2xx status code
func (o *ListVulnerabilitiesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list vulnerabilities bad request response has a 3xx status code
func (o *ListVulnerabilitiesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list vulnerabilities bad request response has a 4xx status code
func (o *ListVulnerabilitiesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list vulnerabilities bad request response has a 5xx status code
func (o *ListVulnerabilitiesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list vulnerabilities bad request response a status code equal to that given
func (o *ListVulnerabilitiesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list vulnerabilities bad request response
func (o *ListVulnerabilitiesBadRequest) Code() int {
	return 400
}

func (o *ListVulnerabilitiesBadRequest) Error() string {
	return fmt.Sprintf("[GET /security/vul][%d] listVulnerabilitiesBadRequest  %+v", 400, o.Payload)
}

func (o *ListVulnerabilitiesBadRequest) String() string {
	return fmt.Sprintf("[GET /security/vul][%d] listVulnerabilitiesBadRequest  %+v", 400, o.Payload)
}

func (o *ListVulnerabilitiesBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ListVulnerabilitiesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListVulnerabilitiesUnauthorized creates a ListVulnerabilitiesUnauthorized with default headers values
func NewListVulnerabilitiesUnauthorized() *ListVulnerabilitiesUnauthorized {
	return &ListVulnerabilitiesUnauthorized{}
}

/*
ListVulnerabilitiesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ListVulnerabilitiesUnauthorized struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this list vulnerabilities unauthorized response has a 2xx status code
func (o *ListVulnerabilitiesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list vulnerabilities unauthorized response has a 3xx status code
func (o *ListVulnerabilitiesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list vulnerabilities unauthorized response has a 4xx status code
func (o *ListVulnerabilitiesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list vulnerabilities unauthorized response has a 5xx status code
func (o *ListVulnerabilitiesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list vulnerabilities unauthorized response a status code equal to that given
func (o *ListVulnerabilitiesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list vulnerabilities unauthorized response
func (o *ListVulnerabilitiesUnauthorized) Code() int {
	return 401
}

func (o *ListVulnerabilitiesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /security/vul][%d] listVulnerabilitiesUnauthorized  %+v", 401, o.Payload)
}

func (o *ListVulnerabilitiesUnauthorized) String() string {
	return fmt.Sprintf("[GET /security/vul][%d] listVulnerabilitiesUnauthorized  %+v", 401, o.Payload)
}

func (o *ListVulnerabilitiesUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ListVulnerabilitiesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListVulnerabilitiesInternalServerError creates a ListVulnerabilitiesInternalServerError with default headers values
func NewListVulnerabilitiesInternalServerError() *ListVulnerabilitiesInternalServerError {
	return &ListVulnerabilitiesInternalServerError{}
}

/*
ListVulnerabilitiesInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type ListVulnerabilitiesInternalServerError struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this list vulnerabilities internal server error response has a 2xx status code
func (o *ListVulnerabilitiesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list vulnerabilities internal server error response has a 3xx status code
func (o *ListVulnerabilitiesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list vulnerabilities internal server error response has a 4xx status code
func (o *ListVulnerabilitiesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list vulnerabilities internal server error response has a 5xx status code
func (o *ListVulnerabilitiesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list vulnerabilities internal server error response a status code equal to that given
func (o *ListVulnerabilitiesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the list vulnerabilities internal server error response
func (o *ListVulnerabilitiesInternalServerError) Code() int {
	return 500
}

func (o *ListVulnerabilitiesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /security/vul][%d] listVulnerabilitiesInternalServerError  %+v", 500, o.Payload)
}

func (o *ListVulnerabilitiesInternalServerError) String() string {
	return fmt.Sprintf("[GET /security/vul][%d] listVulnerabilitiesInternalServerError  %+v", 500, o.Payload)
}

func (o *ListVulnerabilitiesInternalServerError) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ListVulnerabilitiesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
