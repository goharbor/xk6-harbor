// Code generated by go-swagger; DO NOT EDIT.

package securityhub

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery --name API --keeptree --with-expecter --case underscore

// API is the interface of the securityhub client
type API interface {
	/*
	   ListVulnerabilities gets the vulnerability list

	   Get the vulnerability list. use q to pass the query condition,
	   supported conditions:
	   cve_id(exact match)
	   cvss_score_v3(range condition)
	   severity(exact match)
	   repository_name(exact match)
	   project_id(exact match)
	   package(exact match)
	   tag(exact match)
	   digest(exact match)
	*/
	ListVulnerabilities(ctx context.Context, params *ListVulnerabilitiesParams) (*ListVulnerabilitiesOK, error)
	/*
	   GetSecuritySummary gets vulnerability system summary

	   Retrieve the vulnerability summary of the system*/
	GetSecuritySummary(ctx context.Context, params *GetSecuritySummaryParams) (*GetSecuritySummaryOK, error)
}

// New creates a new securityhub API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for securityhub API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
ListVulnerabilities gets the vulnerability list

Get the vulnerability list. use q to pass the query condition,
supported conditions:
cve_id(exact match)
cvss_score_v3(range condition)
severity(exact match)
repository_name(exact match)
project_id(exact match)
package(exact match)
tag(exact match)
digest(exact match)
*/
func (a *Client) ListVulnerabilities(ctx context.Context, params *ListVulnerabilitiesParams) (*ListVulnerabilitiesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListVulnerabilities",
		Method:             "GET",
		PathPattern:        "/security/vul",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListVulnerabilitiesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *ListVulnerabilitiesOK:
		return value, nil
	case *ListVulnerabilitiesBadRequest:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *ListVulnerabilitiesUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *ListVulnerabilitiesInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListVulnerabilities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSecuritySummary gets vulnerability system summary

Retrieve the vulnerability summary of the system
*/
func (a *Client) GetSecuritySummary(ctx context.Context, params *GetSecuritySummaryParams) (*GetSecuritySummaryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSecuritySummary",
		Method:             "GET",
		PathPattern:        "/security/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSecuritySummaryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *GetSecuritySummaryOK:
		return value, nil
	case *GetSecuritySummaryUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetSecuritySummaryForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetSecuritySummaryNotFound:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetSecuritySummaryInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSecuritySummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}
