// Code generated by go-swagger; DO NOT EDIT.

package securityhub

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetSecuritySummaryParams creates a new GetSecuritySummaryParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetSecuritySummaryParams() *GetSecuritySummaryParams {
	return &GetSecuritySummaryParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetSecuritySummaryParamsWithTimeout creates a new GetSecuritySummaryParams object
// with the ability to set a timeout on a request.
func NewGetSecuritySummaryParamsWithTimeout(timeout time.Duration) *GetSecuritySummaryParams {
	return &GetSecuritySummaryParams{
		timeout: timeout,
	}
}

// NewGetSecuritySummaryParamsWithContext creates a new GetSecuritySummaryParams object
// with the ability to set a context for a request.
func NewGetSecuritySummaryParamsWithContext(ctx context.Context) *GetSecuritySummaryParams {
	return &GetSecuritySummaryParams{
		Context: ctx,
	}
}

// NewGetSecuritySummaryParamsWithHTTPClient creates a new GetSecuritySummaryParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetSecuritySummaryParamsWithHTTPClient(client *http.Client) *GetSecuritySummaryParams {
	return &GetSecuritySummaryParams{
		HTTPClient: client,
	}
}

/*
GetSecuritySummaryParams contains all the parameters to send to the API endpoint

	for the get security summary operation.

	Typically these are written to a http.Request.
*/
type GetSecuritySummaryParams struct {

	/* XRequestID.

	   An unique ID for the request
	*/
	XRequestID *string `js:"xRequestID"`

	/* WithDangerousArtifact.

	   Specify whether the dangerous Artifact are included inside summary information
	*/
	WithDangerousArtifact *bool `js:"withDangerousArtifact"`

	/* WithDangerousCVE.

	   Specify whether the dangerous CVEs are included inside summary information
	*/
	WithDangerousCVE *bool `js:"withDangerousCVE"`

	timeout    time.Duration
	Context    context.Context `js:"context"`
	HTTPClient *http.Client    `js:"httpClient"`
}

// WithDefaults hydrates default values in the get security summary params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSecuritySummaryParams) WithDefaults() *GetSecuritySummaryParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get security summary params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSecuritySummaryParams) SetDefaults() {
	var (
		withDangerousArtifactDefault = bool(false)

		withDangerousCVEDefault = bool(false)
	)

	val := GetSecuritySummaryParams{
		WithDangerousArtifact: &withDangerousArtifactDefault,
		WithDangerousCVE:      &withDangerousCVEDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get security summary params
func (o *GetSecuritySummaryParams) WithTimeout(timeout time.Duration) *GetSecuritySummaryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get security summary params
func (o *GetSecuritySummaryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get security summary params
func (o *GetSecuritySummaryParams) WithContext(ctx context.Context) *GetSecuritySummaryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get security summary params
func (o *GetSecuritySummaryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get security summary params
func (o *GetSecuritySummaryParams) WithHTTPClient(client *http.Client) *GetSecuritySummaryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get security summary params
func (o *GetSecuritySummaryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXRequestID adds the xRequestID to the get security summary params
func (o *GetSecuritySummaryParams) WithXRequestID(xRequestID *string) *GetSecuritySummaryParams {
	o.SetXRequestID(xRequestID)
	return o
}

// SetXRequestID adds the xRequestId to the get security summary params
func (o *GetSecuritySummaryParams) SetXRequestID(xRequestID *string) {
	o.XRequestID = xRequestID
}

// WithWithDangerousArtifact adds the withDangerousArtifact to the get security summary params
func (o *GetSecuritySummaryParams) WithWithDangerousArtifact(withDangerousArtifact *bool) *GetSecuritySummaryParams {
	o.SetWithDangerousArtifact(withDangerousArtifact)
	return o
}

// SetWithDangerousArtifact adds the withDangerousArtifact to the get security summary params
func (o *GetSecuritySummaryParams) SetWithDangerousArtifact(withDangerousArtifact *bool) {
	o.WithDangerousArtifact = withDangerousArtifact
}

// WithWithDangerousCVE adds the withDangerousCVE to the get security summary params
func (o *GetSecuritySummaryParams) WithWithDangerousCVE(withDangerousCVE *bool) *GetSecuritySummaryParams {
	o.SetWithDangerousCVE(withDangerousCVE)
	return o
}

// SetWithDangerousCVE adds the withDangerousCve to the get security summary params
func (o *GetSecuritySummaryParams) SetWithDangerousCVE(withDangerousCVE *bool) {
	o.WithDangerousCVE = withDangerousCVE
}

// WriteToRequest writes these params to a swagger request
func (o *GetSecuritySummaryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XRequestID != nil {

		// header param X-Request-Id
		if err := r.SetHeaderParam("X-Request-Id", *o.XRequestID); err != nil {
			return err
		}
	}

	if o.WithDangerousArtifact != nil {

		// query param with_dangerous_artifact
		var qrWithDangerousArtifact bool

		if o.WithDangerousArtifact != nil {
			qrWithDangerousArtifact = *o.WithDangerousArtifact
		}
		qWithDangerousArtifact := swag.FormatBool(qrWithDangerousArtifact)
		if qWithDangerousArtifact != "" {

			if err := r.SetQueryParam("with_dangerous_artifact", qWithDangerousArtifact); err != nil {
				return err
			}
		}
	}

	if o.WithDangerousCVE != nil {

		// query param with_dangerous_cve
		var qrWithDangerousCVE bool

		if o.WithDangerousCVE != nil {
			qrWithDangerousCVE = *o.WithDangerousCVE
		}
		qWithDangerousCVE := swag.FormatBool(qrWithDangerousCVE)
		if qWithDangerousCVE != "" {

			if err := r.SetQueryParam("with_dangerous_cve", qWithDangerousCVE); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
