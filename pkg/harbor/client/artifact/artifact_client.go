// Code generated by go-swagger; DO NOT EDIT.

package artifact

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery --name API --keeptree --with-expecter --case underscore

// API is the interface of the artifact client
type API interface {
	/*
	   CopyArtifact copies artifact

	   Copy the artifact specified in the "from" parameter to the repository.*/
	CopyArtifact(ctx context.Context, params *CopyArtifactParams) (*CopyArtifactCreated, error)
	/*
	   AddLabel adds label to artifact

	   Add label to the specified artiact.*/
	AddLabel(ctx context.Context, params *AddLabelParams) (*AddLabelOK, error)
	/*
	   CreateTag creates tag

	   Create a tag for the specified artifact*/
	CreateTag(ctx context.Context, params *CreateTagParams) (*CreateTagCreated, error)
	/*
	   DeleteArtifact deletes the specific artifact

	   Delete the artifact specified by the reference under the project and repository. The reference can be digest or tag*/
	DeleteArtifact(ctx context.Context, params *DeleteArtifactParams) (*DeleteArtifactOK, error)
	/*
	   DeleteTag deletes tag

	   Delete the tag of the specified artifact*/
	DeleteTag(ctx context.Context, params *DeleteTagParams) (*DeleteTagOK, error)
	/*
	   GetAddition gets the addition of the specific artifact

	   Get the addition of the artifact specified by the reference under the project and repository.*/
	GetAddition(ctx context.Context, params *GetAdditionParams) (*GetAdditionOK, error)
	/*
	   GetArtifact gets the specific artifact

	   Get the artifact specified by the reference under the project and repository. The reference can be digest or tag.*/
	GetArtifact(ctx context.Context, params *GetArtifactParams) (*GetArtifactOK, error)
	/*
	   GetVulnerabilitiesAddition gets the vulnerabilities addition of the specific artifact

	   Get the vulnerabilities addition of the artifact specified by the reference under the project and repository.*/
	GetVulnerabilitiesAddition(ctx context.Context, params *GetVulnerabilitiesAdditionParams) (*GetVulnerabilitiesAdditionOK, error)
	/*
	   ListAccessories lists accessories

	   List accessories of the specific artifact*/
	ListAccessories(ctx context.Context, params *ListAccessoriesParams) (*ListAccessoriesOK, error)
	/*
	   ListArtifacts lists artifacts

	   List artifacts under the specific project and repository. Except the basic properties, the other supported queries in "q" includes "tags=*" to list only tagged artifacts, "tags=nil" to list only untagged artifacts, "tags=~v" to list artifacts whose tag fuzzy matches "v", "tags=v" to list artifact whose tag exactly matches "v", "labels=(id1, id2)" to list artifacts that both labels with id1 and id2 are added to*/
	ListArtifacts(ctx context.Context, params *ListArtifactsParams) (*ListArtifactsOK, error)
	/*
	   ListTags lists tags

	   List tags of the specific artifact*/
	ListTags(ctx context.Context, params *ListTagsParams) (*ListTagsOK, error)
	/*
	   RemoveLabel removes label from artifact

	   Remove the label from the specified artiact.*/
	RemoveLabel(ctx context.Context, params *RemoveLabelParams) (*RemoveLabelOK, error)
}

// New creates a new artifact API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for artifact API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
CopyArtifact copies artifact

Copy the artifact specified in the "from" parameter to the repository.
*/
func (a *Client) CopyArtifact(ctx context.Context, params *CopyArtifactParams) (*CopyArtifactCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CopyArtifact",
		Method:             "POST",
		PathPattern:        "/projects/{project_name}/repositories/{repository_name}/artifacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CopyArtifactReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *CopyArtifactCreated:
		return value, nil
	case *CopyArtifactBadRequest:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *CopyArtifactUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *CopyArtifactForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *CopyArtifactNotFound:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *CopyArtifactMethodNotAllowed:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *CopyArtifactInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CopyArtifact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddLabel adds label to artifact

Add label to the specified artiact.
*/
func (a *Client) AddLabel(ctx context.Context, params *AddLabelParams) (*AddLabelOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addLabel",
		Method:             "POST",
		PathPattern:        "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddLabelReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *AddLabelOK:
		return value, nil
	case *AddLabelBadRequest:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *AddLabelUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *AddLabelForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *AddLabelNotFound:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *AddLabelConflict:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *AddLabelInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addLabel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateTag creates tag

Create a tag for the specified artifact
*/
func (a *Client) CreateTag(ctx context.Context, params *CreateTagParams) (*CreateTagCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createTag",
		Method:             "POST",
		PathPattern:        "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateTagReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *CreateTagCreated:
		return value, nil
	case *CreateTagBadRequest:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *CreateTagUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *CreateTagForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *CreateTagNotFound:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *CreateTagMethodNotAllowed:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *CreateTagConflict:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *CreateTagInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteArtifact deletes the specific artifact

Delete the artifact specified by the reference under the project and repository. The reference can be digest or tag
*/
func (a *Client) DeleteArtifact(ctx context.Context, params *DeleteArtifactParams) (*DeleteArtifactOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteArtifact",
		Method:             "DELETE",
		PathPattern:        "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteArtifactReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *DeleteArtifactOK:
		return value, nil
	case *DeleteArtifactUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *DeleteArtifactForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *DeleteArtifactNotFound:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *DeleteArtifactInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteArtifact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTag deletes tag

Delete the tag of the specified artifact
*/
func (a *Client) DeleteTag(ctx context.Context, params *DeleteTagParams) (*DeleteTagOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTag",
		Method:             "DELETE",
		PathPattern:        "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags/{tag_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteTagReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *DeleteTagOK:
		return value, nil
	case *DeleteTagUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *DeleteTagForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *DeleteTagNotFound:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *DeleteTagInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAddition gets the addition of the specific artifact

Get the addition of the artifact specified by the reference under the project and repository.
*/
func (a *Client) GetAddition(ctx context.Context, params *GetAdditionParams) (*GetAdditionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAddition",
		Method:             "GET",
		PathPattern:        "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/{addition}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAdditionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *GetAdditionOK:
		return value, nil
	case *GetAdditionBadRequest:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetAdditionUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetAdditionForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetAdditionNotFound:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetAdditionUnprocessableEntity:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetAdditionInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAddition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetArtifact gets the specific artifact

Get the artifact specified by the reference under the project and repository. The reference can be digest or tag.
*/
func (a *Client) GetArtifact(ctx context.Context, params *GetArtifactParams) (*GetArtifactOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArtifact",
		Method:             "GET",
		PathPattern:        "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetArtifactReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *GetArtifactOK:
		return value, nil
	case *GetArtifactBadRequest:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetArtifactUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetArtifactForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetArtifactNotFound:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetArtifactInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getArtifact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetVulnerabilitiesAddition gets the vulnerabilities addition of the specific artifact

Get the vulnerabilities addition of the artifact specified by the reference under the project and repository.
*/
func (a *Client) GetVulnerabilitiesAddition(ctx context.Context, params *GetVulnerabilitiesAdditionParams) (*GetVulnerabilitiesAdditionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVulnerabilitiesAddition",
		Method:             "GET",
		PathPattern:        "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/vulnerabilities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetVulnerabilitiesAdditionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *GetVulnerabilitiesAdditionOK:
		return value, nil
	case *GetVulnerabilitiesAdditionBadRequest:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetVulnerabilitiesAdditionUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetVulnerabilitiesAdditionForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetVulnerabilitiesAdditionNotFound:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetVulnerabilitiesAdditionInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVulnerabilitiesAddition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListAccessories lists accessories

List accessories of the specific artifact
*/
func (a *Client) ListAccessories(ctx context.Context, params *ListAccessoriesParams) (*ListAccessoriesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAccessories",
		Method:             "GET",
		PathPattern:        "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/accessories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListAccessoriesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *ListAccessoriesOK:
		return value, nil
	case *ListAccessoriesBadRequest:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *ListAccessoriesUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *ListAccessoriesForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *ListAccessoriesNotFound:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *ListAccessoriesInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAccessories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListArtifacts lists artifacts

List artifacts under the specific project and repository. Except the basic properties, the other supported queries in "q" includes "tags=*" to list only tagged artifacts, "tags=nil" to list only untagged artifacts, "tags=~v" to list artifacts whose tag fuzzy matches "v", "tags=v" to list artifact whose tag exactly matches "v", "labels=(id1, id2)" to list artifacts that both labels with id1 and id2 are added to
*/
func (a *Client) ListArtifacts(ctx context.Context, params *ListArtifactsParams) (*ListArtifactsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listArtifacts",
		Method:             "GET",
		PathPattern:        "/projects/{project_name}/repositories/{repository_name}/artifacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListArtifactsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *ListArtifactsOK:
		return value, nil
	case *ListArtifactsBadRequest:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *ListArtifactsUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *ListArtifactsForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *ListArtifactsNotFound:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *ListArtifactsInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listArtifacts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListTags lists tags

List tags of the specific artifact
*/
func (a *Client) ListTags(ctx context.Context, params *ListTagsParams) (*ListTagsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listTags",
		Method:             "GET",
		PathPattern:        "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListTagsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *ListTagsOK:
		return value, nil
	case *ListTagsBadRequest:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *ListTagsUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *ListTagsForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *ListTagsNotFound:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *ListTagsInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveLabel removes label from artifact

Remove the label from the specified artiact.
*/
func (a *Client) RemoveLabel(ctx context.Context, params *RemoveLabelParams) (*RemoveLabelOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeLabel",
		Method:             "DELETE",
		PathPattern:        "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels/{label_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemoveLabelReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *RemoveLabelOK:
		return value, nil
	case *RemoveLabelUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *RemoveLabelForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *RemoveLabelNotFound:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *RemoveLabelConflict:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *RemoveLabelInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeLabel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}
