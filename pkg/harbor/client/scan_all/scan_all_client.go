// Code generated by go-swagger; DO NOT EDIT.

package scan_all

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery --name API --keeptree --with-expecter --case underscore

// API is the interface of the scan all client
type API interface {
	/*
	   CreateScanAllSchedule creates a schedule or a manual trigger for the scan all job

	   This endpoint is for creating a schedule or a manual trigger for the scan all job, which scans all of images in Harbor.*/
	CreateScanAllSchedule(ctx context.Context, params *CreateScanAllScheduleParams) (*CreateScanAllScheduleCreated, error)
	/*
	   GetLatestScanAllMetrics gets the metrics of the latest scan all process

	   Get the metrics of the latest scan all process*/
	GetLatestScanAllMetrics(ctx context.Context, params *GetLatestScanAllMetricsParams) (*GetLatestScanAllMetricsOK, error)
	/*
	   GetLatestScheduledScanAllMetrics gets the metrics of the latest scheduled scan all process

	   Get the metrics of the latest scheduled scan all process*/
	GetLatestScheduledScanAllMetrics(ctx context.Context, params *GetLatestScheduledScanAllMetricsParams) (*GetLatestScheduledScanAllMetricsOK, error)
	/*
	   GetScanAllSchedule gets scan all s schedule

	   This endpoint is for getting a schedule for the scan all job, which scans all of images in Harbor.*/
	GetScanAllSchedule(ctx context.Context, params *GetScanAllScheduleParams) (*GetScanAllScheduleOK, error)
	/*
	   StopScanAll stops scan all job execution

	   Stop scanAll job execution*/
	StopScanAll(ctx context.Context, params *StopScanAllParams) (*StopScanAllAccepted, error)
	/*
	   UpdateScanAllSchedule updates scan all s schedule

	   This endpoint is for updating the schedule of scan all job, which scans all of images in Harbor.*/
	UpdateScanAllSchedule(ctx context.Context, params *UpdateScanAllScheduleParams) (*UpdateScanAllScheduleOK, error)
}

// New creates a new scan all API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for scan all API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
CreateScanAllSchedule creates a schedule or a manual trigger for the scan all job

This endpoint is for creating a schedule or a manual trigger for the scan all job, which scans all of images in Harbor.
*/
func (a *Client) CreateScanAllSchedule(ctx context.Context, params *CreateScanAllScheduleParams) (*CreateScanAllScheduleCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createScanAllSchedule",
		Method:             "POST",
		PathPattern:        "/system/scanAll/schedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateScanAllScheduleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *CreateScanAllScheduleCreated:
		return value, nil
	case *CreateScanAllScheduleBadRequest:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *CreateScanAllScheduleUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *CreateScanAllScheduleForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *CreateScanAllScheduleConflict:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *CreateScanAllSchedulePreconditionFailed:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *CreateScanAllScheduleInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createScanAllSchedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLatestScanAllMetrics gets the metrics of the latest scan all process

Get the metrics of the latest scan all process
*/
func (a *Client) GetLatestScanAllMetrics(ctx context.Context, params *GetLatestScanAllMetricsParams) (*GetLatestScanAllMetricsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLatestScanAllMetrics",
		Method:             "GET",
		PathPattern:        "/scans/all/metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLatestScanAllMetricsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *GetLatestScanAllMetricsOK:
		return value, nil
	case *GetLatestScanAllMetricsUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetLatestScanAllMetricsForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetLatestScanAllMetricsPreconditionFailed:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetLatestScanAllMetricsInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLatestScanAllMetrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLatestScheduledScanAllMetrics gets the metrics of the latest scheduled scan all process

Get the metrics of the latest scheduled scan all process
*/
func (a *Client) GetLatestScheduledScanAllMetrics(ctx context.Context, params *GetLatestScheduledScanAllMetricsParams) (*GetLatestScheduledScanAllMetricsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLatestScheduledScanAllMetrics",
		Method:             "GET",
		PathPattern:        "/scans/schedule/metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLatestScheduledScanAllMetricsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *GetLatestScheduledScanAllMetricsOK:
		return value, nil
	case *GetLatestScheduledScanAllMetricsUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetLatestScheduledScanAllMetricsForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetLatestScheduledScanAllMetricsPreconditionFailed:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetLatestScheduledScanAllMetricsInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLatestScheduledScanAllMetrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetScanAllSchedule gets scan all s schedule

This endpoint is for getting a schedule for the scan all job, which scans all of images in Harbor.
*/
func (a *Client) GetScanAllSchedule(ctx context.Context, params *GetScanAllScheduleParams) (*GetScanAllScheduleOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getScanAllSchedule",
		Method:             "GET",
		PathPattern:        "/system/scanAll/schedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetScanAllScheduleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *GetScanAllScheduleOK:
		return value, nil
	case *GetScanAllScheduleUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetScanAllScheduleForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetScanAllSchedulePreconditionFailed:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *GetScanAllScheduleInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getScanAllSchedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopScanAll stops scan all job execution

Stop scanAll job execution
*/
func (a *Client) StopScanAll(ctx context.Context, params *StopScanAllParams) (*StopScanAllAccepted, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stopScanAll",
		Method:             "POST",
		PathPattern:        "/system/scanAll/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StopScanAllReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *StopScanAllAccepted:
		return value, nil
	case *StopScanAllBadRequest:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *StopScanAllUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *StopScanAllForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *StopScanAllInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stopScanAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateScanAllSchedule updates scan all s schedule

This endpoint is for updating the schedule of scan all job, which scans all of images in Harbor.
*/
func (a *Client) UpdateScanAllSchedule(ctx context.Context, params *UpdateScanAllScheduleParams) (*UpdateScanAllScheduleOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateScanAllSchedule",
		Method:             "PUT",
		PathPattern:        "/system/scanAll/schedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateScanAllScheduleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	switch value := result.(type) {
	case *UpdateScanAllScheduleOK:
		return value, nil
	case *UpdateScanAllScheduleBadRequest:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *UpdateScanAllScheduleUnauthorized:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *UpdateScanAllScheduleForbidden:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *UpdateScanAllSchedulePreconditionFailed:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	case *UpdateScanAllScheduleInternalServerError:
		return nil, runtime.NewAPIError("unsuccessful response", value, value.Code())
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateScanAllSchedule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}
