// Code generated by go-swagger; DO NOT EDIT.

package replication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteReplicationPolicyParams creates a new DeleteReplicationPolicyParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteReplicationPolicyParams() *DeleteReplicationPolicyParams {
	return &DeleteReplicationPolicyParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteReplicationPolicyParamsWithTimeout creates a new DeleteReplicationPolicyParams object
// with the ability to set a timeout on a request.
func NewDeleteReplicationPolicyParamsWithTimeout(timeout time.Duration) *DeleteReplicationPolicyParams {
	return &DeleteReplicationPolicyParams{
		timeout: timeout,
	}
}

// NewDeleteReplicationPolicyParamsWithContext creates a new DeleteReplicationPolicyParams object
// with the ability to set a context for a request.
func NewDeleteReplicationPolicyParamsWithContext(ctx context.Context) *DeleteReplicationPolicyParams {
	return &DeleteReplicationPolicyParams{
		Context: ctx,
	}
}

// NewDeleteReplicationPolicyParamsWithHTTPClient creates a new DeleteReplicationPolicyParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteReplicationPolicyParamsWithHTTPClient(client *http.Client) *DeleteReplicationPolicyParams {
	return &DeleteReplicationPolicyParams{
		HTTPClient: client,
	}
}

/*
DeleteReplicationPolicyParams contains all the parameters to send to the API endpoint

	for the delete replication policy operation.

	Typically these are written to a http.Request.
*/
type DeleteReplicationPolicyParams struct {

	/* XRequestID.

	   An unique ID for the request
	*/
	XRequestID *string `js:"xRequestID"`

	/* ID.

	   Replication policy ID

	   Format: int64
	*/
	ID int64 `js:"id"`

	timeout    time.Duration
	Context    context.Context `js:"context"`
	HTTPClient *http.Client    `js:"httpClient"`
}

// WithDefaults hydrates default values in the delete replication policy params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteReplicationPolicyParams) WithDefaults() *DeleteReplicationPolicyParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete replication policy params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteReplicationPolicyParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the delete replication policy params
func (o *DeleteReplicationPolicyParams) WithTimeout(timeout time.Duration) *DeleteReplicationPolicyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete replication policy params
func (o *DeleteReplicationPolicyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete replication policy params
func (o *DeleteReplicationPolicyParams) WithContext(ctx context.Context) *DeleteReplicationPolicyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete replication policy params
func (o *DeleteReplicationPolicyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete replication policy params
func (o *DeleteReplicationPolicyParams) WithHTTPClient(client *http.Client) *DeleteReplicationPolicyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete replication policy params
func (o *DeleteReplicationPolicyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXRequestID adds the xRequestID to the delete replication policy params
func (o *DeleteReplicationPolicyParams) WithXRequestID(xRequestID *string) *DeleteReplicationPolicyParams {
	o.SetXRequestID(xRequestID)
	return o
}

// SetXRequestID adds the xRequestId to the delete replication policy params
func (o *DeleteReplicationPolicyParams) SetXRequestID(xRequestID *string) {
	o.XRequestID = xRequestID
}

// WithID adds the id to the delete replication policy params
func (o *DeleteReplicationPolicyParams) WithID(id int64) *DeleteReplicationPolicyParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the delete replication policy params
func (o *DeleteReplicationPolicyParams) SetID(id int64) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteReplicationPolicyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XRequestID != nil {

		// header param X-Request-Id
		if err := r.SetHeaderParam("X-Request-Id", *o.XRequestID); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
